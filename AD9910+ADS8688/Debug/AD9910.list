
AD9910.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b24  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004cac  08004cac  00005cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cdc  08004cdc  00006078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004cdc  08004cdc  00005cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ce4  08004ce4  00006078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce4  08004ce4  00005ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ce8  08004ce8  00005ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08004cec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006078  2**0
                  CONTENTS
 10 .bss          00000a18  20000078  20000078  00006078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a90  20000a90  00006078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bbd5  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024ab  00000000  00000000  00011c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab8  00000000  00000000  00014128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000819  00000000  00000000  00014be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bdf  00000000  00000000  000153f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e7da  00000000  00000000  00037fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8858  00000000  00000000  000467b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010f00a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003160  00000000  00000000  0010f050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  001121b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c94 	.word	0x08004c94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08004c94 	.word	0x08004c94

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b988 	b.w	8000d6c <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	468e      	mov	lr, r1
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	4688      	mov	r8, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d14a      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d962      	bls.n	8000b50 <__udivmoddi4+0xdc>
 8000a8a:	fab2 f682 	clz	r6, r2
 8000a8e:	b14e      	cbz	r6, 8000aa4 <__udivmoddi4+0x30>
 8000a90:	f1c6 0320 	rsb	r3, r6, #32
 8000a94:	fa01 f806 	lsl.w	r8, r1, r6
 8000a98:	fa20 f303 	lsr.w	r3, r0, r3
 8000a9c:	40b7      	lsls	r7, r6
 8000a9e:	ea43 0808 	orr.w	r8, r3, r8
 8000aa2:	40b4      	lsls	r4, r6
 8000aa4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aa8:	fa1f fc87 	uxth.w	ip, r7
 8000aac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab0:	0c23      	lsrs	r3, r4, #16
 8000ab2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ab6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aba:	fb01 f20c 	mul.w	r2, r1, ip
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0x62>
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ac8:	f080 80ea 	bcs.w	8000ca0 <__udivmoddi4+0x22c>
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f240 80e7 	bls.w	8000ca0 <__udivmoddi4+0x22c>
 8000ad2:	3902      	subs	r1, #2
 8000ad4:	443b      	add	r3, r7
 8000ad6:	1a9a      	subs	r2, r3, r2
 8000ad8:	b2a3      	uxth	r3, r4
 8000ada:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ade:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ae6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aea:	459c      	cmp	ip, r3
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x8e>
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000af4:	f080 80d6 	bcs.w	8000ca4 <__udivmoddi4+0x230>
 8000af8:	459c      	cmp	ip, r3
 8000afa:	f240 80d3 	bls.w	8000ca4 <__udivmoddi4+0x230>
 8000afe:	443b      	add	r3, r7
 8000b00:	3802      	subs	r0, #2
 8000b02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b06:	eba3 030c 	sub.w	r3, r3, ip
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	b11d      	cbz	r5, 8000b16 <__udivmoddi4+0xa2>
 8000b0e:	40f3      	lsrs	r3, r6
 8000b10:	2200      	movs	r2, #0
 8000b12:	e9c5 3200 	strd	r3, r2, [r5]
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d905      	bls.n	8000b2a <__udivmoddi4+0xb6>
 8000b1e:	b10d      	cbz	r5, 8000b24 <__udivmoddi4+0xb0>
 8000b20:	e9c5 0100 	strd	r0, r1, [r5]
 8000b24:	2100      	movs	r1, #0
 8000b26:	4608      	mov	r0, r1
 8000b28:	e7f5      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b2a:	fab3 f183 	clz	r1, r3
 8000b2e:	2900      	cmp	r1, #0
 8000b30:	d146      	bne.n	8000bc0 <__udivmoddi4+0x14c>
 8000b32:	4573      	cmp	r3, lr
 8000b34:	d302      	bcc.n	8000b3c <__udivmoddi4+0xc8>
 8000b36:	4282      	cmp	r2, r0
 8000b38:	f200 8105 	bhi.w	8000d46 <__udivmoddi4+0x2d2>
 8000b3c:	1a84      	subs	r4, r0, r2
 8000b3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b42:	2001      	movs	r0, #1
 8000b44:	4690      	mov	r8, r2
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d0e5      	beq.n	8000b16 <__udivmoddi4+0xa2>
 8000b4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b4e:	e7e2      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	f000 8090 	beq.w	8000c76 <__udivmoddi4+0x202>
 8000b56:	fab2 f682 	clz	r6, r2
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	f040 80a4 	bne.w	8000ca8 <__udivmoddi4+0x234>
 8000b60:	1a8a      	subs	r2, r1, r2
 8000b62:	0c03      	lsrs	r3, r0, #16
 8000b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	b2bc      	uxth	r4, r7
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d907      	bls.n	8000b92 <__udivmoddi4+0x11e>
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x11c>
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	f200 80e0 	bhi.w	8000d50 <__udivmoddi4+0x2dc>
 8000b90:	46c4      	mov	ip, r8
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba0:	fb02 f404 	mul.w	r4, r2, r4
 8000ba4:	429c      	cmp	r4, r3
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x144>
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x142>
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	f200 80ca 	bhi.w	8000d4a <__udivmoddi4+0x2d6>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	1b1b      	subs	r3, r3, r4
 8000bba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bbe:	e7a5      	b.n	8000b0c <__udivmoddi4+0x98>
 8000bc0:	f1c1 0620 	rsb	r6, r1, #32
 8000bc4:	408b      	lsls	r3, r1
 8000bc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bca:	431f      	orrs	r7, r3
 8000bcc:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd0:	fa20 f306 	lsr.w	r3, r0, r6
 8000bd4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bd8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bdc:	4323      	orrs	r3, r4
 8000bde:	fa00 f801 	lsl.w	r8, r0, r1
 8000be2:	fa1f fc87 	uxth.w	ip, r7
 8000be6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bea:	0c1c      	lsrs	r4, r3, #16
 8000bec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bf4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x1a0>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c06:	f080 809c 	bcs.w	8000d42 <__udivmoddi4+0x2ce>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f240 8099 	bls.w	8000d42 <__udivmoddi4+0x2ce>
 8000c10:	3802      	subs	r0, #2
 8000c12:	443c      	add	r4, r7
 8000c14:	eba4 040e 	sub.w	r4, r4, lr
 8000c18:	fa1f fe83 	uxth.w	lr, r3
 8000c1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c20:	fb09 4413 	mls	r4, r9, r3, r4
 8000c24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c2c:	45a4      	cmp	ip, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x1ce>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c36:	f080 8082 	bcs.w	8000d3e <__udivmoddi4+0x2ca>
 8000c3a:	45a4      	cmp	ip, r4
 8000c3c:	d97f      	bls.n	8000d3e <__udivmoddi4+0x2ca>
 8000c3e:	3b02      	subs	r3, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c46:	eba4 040c 	sub.w	r4, r4, ip
 8000c4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c4e:	4564      	cmp	r4, ip
 8000c50:	4673      	mov	r3, lr
 8000c52:	46e1      	mov	r9, ip
 8000c54:	d362      	bcc.n	8000d1c <__udivmoddi4+0x2a8>
 8000c56:	d05f      	beq.n	8000d18 <__udivmoddi4+0x2a4>
 8000c58:	b15d      	cbz	r5, 8000c72 <__udivmoddi4+0x1fe>
 8000c5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c62:	fa04 f606 	lsl.w	r6, r4, r6
 8000c66:	fa22 f301 	lsr.w	r3, r2, r1
 8000c6a:	431e      	orrs	r6, r3
 8000c6c:	40cc      	lsrs	r4, r1
 8000c6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c72:	2100      	movs	r1, #0
 8000c74:	e74f      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000c76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c7a:	0c01      	lsrs	r1, r0, #16
 8000c7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c80:	b280      	uxth	r0, r0
 8000c82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c86:	463b      	mov	r3, r7
 8000c88:	4638      	mov	r0, r7
 8000c8a:	463c      	mov	r4, r7
 8000c8c:	46b8      	mov	r8, r7
 8000c8e:	46be      	mov	lr, r7
 8000c90:	2620      	movs	r6, #32
 8000c92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c96:	eba2 0208 	sub.w	r2, r2, r8
 8000c9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c9e:	e766      	b.n	8000b6e <__udivmoddi4+0xfa>
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	e718      	b.n	8000ad6 <__udivmoddi4+0x62>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	e72c      	b.n	8000b02 <__udivmoddi4+0x8e>
 8000ca8:	f1c6 0220 	rsb	r2, r6, #32
 8000cac:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	40b1      	lsls	r1, r6
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cc2:	b2bc      	uxth	r4, r7
 8000cc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cce:	fb08 f904 	mul.w	r9, r8, r4
 8000cd2:	40b0      	lsls	r0, r6
 8000cd4:	4589      	cmp	r9, r1
 8000cd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cda:	b280      	uxth	r0, r0
 8000cdc:	d93e      	bls.n	8000d5c <__udivmoddi4+0x2e8>
 8000cde:	1879      	adds	r1, r7, r1
 8000ce0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ce4:	d201      	bcs.n	8000cea <__udivmoddi4+0x276>
 8000ce6:	4589      	cmp	r9, r1
 8000ce8:	d81f      	bhi.n	8000d2a <__udivmoddi4+0x2b6>
 8000cea:	eba1 0109 	sub.w	r1, r1, r9
 8000cee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf2:	fb09 f804 	mul.w	r8, r9, r4
 8000cf6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cfa:	b292      	uxth	r2, r2
 8000cfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d00:	4542      	cmp	r2, r8
 8000d02:	d229      	bcs.n	8000d58 <__udivmoddi4+0x2e4>
 8000d04:	18ba      	adds	r2, r7, r2
 8000d06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d0a:	d2c4      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d0c:	4542      	cmp	r2, r8
 8000d0e:	d2c2      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d10:	f1a9 0102 	sub.w	r1, r9, #2
 8000d14:	443a      	add	r2, r7
 8000d16:	e7be      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d18:	45f0      	cmp	r8, lr
 8000d1a:	d29d      	bcs.n	8000c58 <__udivmoddi4+0x1e4>
 8000d1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d24:	3801      	subs	r0, #1
 8000d26:	46e1      	mov	r9, ip
 8000d28:	e796      	b.n	8000c58 <__udivmoddi4+0x1e4>
 8000d2a:	eba7 0909 	sub.w	r9, r7, r9
 8000d2e:	4449      	add	r1, r9
 8000d30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d38:	fb09 f804 	mul.w	r8, r9, r4
 8000d3c:	e7db      	b.n	8000cf6 <__udivmoddi4+0x282>
 8000d3e:	4673      	mov	r3, lr
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1ce>
 8000d42:	4650      	mov	r0, sl
 8000d44:	e766      	b.n	8000c14 <__udivmoddi4+0x1a0>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e6fd      	b.n	8000b46 <__udivmoddi4+0xd2>
 8000d4a:	443b      	add	r3, r7
 8000d4c:	3a02      	subs	r2, #2
 8000d4e:	e733      	b.n	8000bb8 <__udivmoddi4+0x144>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	443b      	add	r3, r7
 8000d56:	e71c      	b.n	8000b92 <__udivmoddi4+0x11e>
 8000d58:	4649      	mov	r1, r9
 8000d5a:	e79c      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d5c:	eba1 0109 	sub.w	r1, r1, r9
 8000d60:	46c4      	mov	ip, r8
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fb09 f804 	mul.w	r8, r9, r4
 8000d6a:	e7c4      	b.n	8000cf6 <__udivmoddi4+0x282>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <Init_ad9910>:
		2354, 2357, 2362, 2368, 2375, 2383, 2393, 2404, 2416, 2430, 2444, 2460,
		2476, 2494, 2513, 2532, 2553, 2574, 2596, 2619, 2642, 2666, 2690, 2715,
		2740, 2766, 2792, 2818, 2844, 2871, 2897, 2924, };

//======================ad9910��ʼ������===============================
void Init_ad9910(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	AD9910_PWR_L; //��������
 8000d74:	2200      	movs	r2, #0
 8000d76:	2120      	movs	r1, #32
 8000d78:	4816      	ldr	r0, [pc, #88]	@ (8000dd4 <Init_ad9910+0x64>)
 8000d7a:	f001 fae9 	bl	8002350 <HAL_GPIO_WritePin>
	//ѡ��profile0
	PROFILE2_L;
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2120      	movs	r1, #32
 8000d82:	4815      	ldr	r0, [pc, #84]	@ (8000dd8 <Init_ad9910+0x68>)
 8000d84:	f001 fae4 	bl	8002350 <HAL_GPIO_WritePin>
	PROFILE1_L;
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d8e:	4811      	ldr	r0, [pc, #68]	@ (8000dd4 <Init_ad9910+0x64>)
 8000d90:	f001 fade 	bl	8002350 <HAL_GPIO_WritePin>
	PROFILE0_L;
 8000d94:	2200      	movs	r2, #0
 8000d96:	2110      	movs	r1, #16
 8000d98:	480f      	ldr	r0, [pc, #60]	@ (8000dd8 <Init_ad9910+0x68>)
 8000d9a:	f001 fad9 	bl	8002350 <HAL_GPIO_WritePin>
	DRCTL_L;
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2104      	movs	r1, #4
 8000da2:	480d      	ldr	r0, [pc, #52]	@ (8000dd8 <Init_ad9910+0x68>)
 8000da4:	f001 fad4 	bl	8002350 <HAL_GPIO_WritePin>
	DRHOLD_L;
 8000da8:	2200      	movs	r2, #0
 8000daa:	2180      	movs	r1, #128	@ 0x80
 8000dac:	4809      	ldr	r0, [pc, #36]	@ (8000dd4 <Init_ad9910+0x64>)
 8000dae:	f001 facf 	bl	8002350 <HAL_GPIO_WritePin>
	MAS_REST_H;
 8000db2:	2201      	movs	r2, #1
 8000db4:	2101      	movs	r1, #1
 8000db6:	4808      	ldr	r0, [pc, #32]	@ (8000dd8 <Init_ad9910+0x68>)
 8000db8:	f001 faca 	bl	8002350 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000dbc:	2005      	movs	r0, #5
 8000dbe:	f000 ff63 	bl	8001c88 <HAL_Delay>
	MAS_REST_L;
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <Init_ad9910+0x68>)
 8000dc8:	f001 fac2 	bl	8002350 <HAL_GPIO_WritePin>

	Txcfr();
 8000dcc:	f000 f842 	bl	8000e54 <Txcfr>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	40020c00 	.word	0x40020c00

08000ddc <txd_8bit>:
 ** �������� ��AD9910���п�д������
 ** ��ڲ��� ��8λ�Ĵ�������
 ** ���ڲ��� ����
 ** ����˵�� ����
 **************************************************************/
void txd_8bit(uchar txdat) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
	//�ڶ��������½��ض�ȡ����
	uchar i, sbt;
	sbt = 0x80;
 8000de6:	2380      	movs	r3, #128	@ 0x80
 8000de8:	73bb      	strb	r3, [r7, #14]
	SCLK_L;
 8000dea:	2200      	movs	r2, #0
 8000dec:	2102      	movs	r1, #2
 8000dee:	4817      	ldr	r0, [pc, #92]	@ (8000e4c <txd_8bit+0x70>)
 8000df0:	f001 faae 	bl	8002350 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8000df4:	2300      	movs	r3, #0
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	e020      	b.n	8000e3c <txd_8bit+0x60>
		if ((txdat & sbt) == 0)
 8000dfa:	79fa      	ldrb	r2, [r7, #7]
 8000dfc:	7bbb      	ldrb	r3, [r7, #14]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d105      	bne.n	8000e12 <txd_8bit+0x36>
			AD9910_SDIO_L;
 8000e06:	2200      	movs	r2, #0
 8000e08:	2140      	movs	r1, #64	@ 0x40
 8000e0a:	4811      	ldr	r0, [pc, #68]	@ (8000e50 <txd_8bit+0x74>)
 8000e0c:	f001 faa0 	bl	8002350 <HAL_GPIO_WritePin>
 8000e10:	e004      	b.n	8000e1c <txd_8bit+0x40>
		else
			AD9910_SDIO_H;
 8000e12:	2201      	movs	r2, #1
 8000e14:	2140      	movs	r1, #64	@ 0x40
 8000e16:	480e      	ldr	r0, [pc, #56]	@ (8000e50 <txd_8bit+0x74>)
 8000e18:	f001 fa9a 	bl	8002350 <HAL_GPIO_WritePin>
		SCLK_H;
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2102      	movs	r1, #2
 8000e20:	480a      	ldr	r0, [pc, #40]	@ (8000e4c <txd_8bit+0x70>)
 8000e22:	f001 fa95 	bl	8002350 <HAL_GPIO_WritePin>
		sbt = sbt >> 1;
 8000e26:	7bbb      	ldrb	r3, [r7, #14]
 8000e28:	085b      	lsrs	r3, r3, #1
 8000e2a:	73bb      	strb	r3, [r7, #14]
		SCLK_L;
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2102      	movs	r1, #2
 8000e30:	4806      	ldr	r0, [pc, #24]	@ (8000e4c <txd_8bit+0x70>)
 8000e32:	f001 fa8d 	bl	8002350 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	2b07      	cmp	r3, #7
 8000e40:	d9db      	bls.n	8000dfa <txd_8bit+0x1e>
	}
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40020c00 	.word	0x40020c00
 8000e50:	40020400 	.word	0x40020400

08000e54 <Txcfr>:
 ** �������� ����AD9910оƬ����Ƶ�ʣ����ȵ���ؿ������ݣ�ad9910����cfrx�����ֳ���
 ** ��ڲ��� ����
 ** ���ڲ��� ����
 ** ����˵�� ����
 **************************************************************/
void Txcfr(void) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
	uchar m, k;

	CS_L;
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e60:	4847      	ldr	r0, [pc, #284]	@ (8000f80 <Txcfr+0x12c>)
 8000e62:	f001 fa75 	bl	8002350 <HAL_GPIO_WritePin>
	txd_8bit(0x00);    //����CFR1�����ֵ�ַ
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff ffb8 	bl	8000ddc <txd_8bit>
	for (m = 0; m < 4; m++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	71fb      	strb	r3, [r7, #7]
 8000e70:	e008      	b.n	8000e84 <Txcfr+0x30>
		txd_8bit(cfr1[m]);
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	4a43      	ldr	r2, [pc, #268]	@ (8000f84 <Txcfr+0x130>)
 8000e76:	5cd3      	ldrb	r3, [r2, r3]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ffaf 	bl	8000ddc <txd_8bit>
	for (m = 0; m < 4; m++)
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	3301      	adds	r3, #1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d9f3      	bls.n	8000e72 <Txcfr+0x1e>
	CS_H;
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e90:	483b      	ldr	r0, [pc, #236]	@ (8000f80 <Txcfr+0x12c>)
 8000e92:	f001 fa5d 	bl	8002350 <HAL_GPIO_WritePin>
	for (k = 0; k < 10; k++)
 8000e96:	2300      	movs	r3, #0
 8000e98:	71bb      	strb	r3, [r7, #6]
 8000e9a:	e002      	b.n	8000ea2 <Txcfr+0x4e>
 8000e9c:	79bb      	ldrb	r3, [r7, #6]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	71bb      	strb	r3, [r7, #6]
 8000ea2:	79bb      	ldrb	r3, [r7, #6]
 8000ea4:	2b09      	cmp	r3, #9
 8000ea6:	d9f9      	bls.n	8000e9c <Txcfr+0x48>
		;

	CS_L;
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eae:	4834      	ldr	r0, [pc, #208]	@ (8000f80 <Txcfr+0x12c>)
 8000eb0:	f001 fa4e 	bl	8002350 <HAL_GPIO_WritePin>
	txd_8bit(0x01);    //����CFR2�����ֵ�ַ
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f7ff ff91 	bl	8000ddc <txd_8bit>
	for (m = 0; m < 4; m++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	71fb      	strb	r3, [r7, #7]
 8000ebe:	e008      	b.n	8000ed2 <Txcfr+0x7e>
		txd_8bit(cfr2[m]);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	4a31      	ldr	r2, [pc, #196]	@ (8000f88 <Txcfr+0x134>)
 8000ec4:	5cd3      	ldrb	r3, [r2, r3]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff88 	bl	8000ddc <txd_8bit>
	for (m = 0; m < 4; m++)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	71fb      	strb	r3, [r7, #7]
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d9f3      	bls.n	8000ec0 <Txcfr+0x6c>
	CS_H;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ede:	4828      	ldr	r0, [pc, #160]	@ (8000f80 <Txcfr+0x12c>)
 8000ee0:	f001 fa36 	bl	8002350 <HAL_GPIO_WritePin>
	for (k = 0; k < 10; k++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	71bb      	strb	r3, [r7, #6]
 8000ee8:	e002      	b.n	8000ef0 <Txcfr+0x9c>
 8000eea:	79bb      	ldrb	r3, [r7, #6]
 8000eec:	3301      	adds	r3, #1
 8000eee:	71bb      	strb	r3, [r7, #6]
 8000ef0:	79bb      	ldrb	r3, [r7, #6]
 8000ef2:	2b09      	cmp	r3, #9
 8000ef4:	d9f9      	bls.n	8000eea <Txcfr+0x96>
		;

	CS_L;
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000efc:	4820      	ldr	r0, [pc, #128]	@ (8000f80 <Txcfr+0x12c>)
 8000efe:	f001 fa27 	bl	8002350 <HAL_GPIO_WritePin>
	txd_8bit(0x02);    //����CFR3�����ֵ�ַ
 8000f02:	2002      	movs	r0, #2
 8000f04:	f7ff ff6a 	bl	8000ddc <txd_8bit>
	for (m = 0; m < 4; m++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	e008      	b.n	8000f20 <Txcfr+0xcc>
		txd_8bit(cfr3[m]);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	4a1e      	ldr	r2, [pc, #120]	@ (8000f8c <Txcfr+0x138>)
 8000f12:	5cd3      	ldrb	r3, [r2, r3]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff61 	bl	8000ddc <txd_8bit>
	for (m = 0; m < 4; m++)
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d9f3      	bls.n	8000f0e <Txcfr+0xba>
	CS_H;
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f2c:	4814      	ldr	r0, [pc, #80]	@ (8000f80 <Txcfr+0x12c>)
 8000f2e:	f001 fa0f 	bl	8002350 <HAL_GPIO_WritePin>
	for (k = 0; k < 10; k++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	71bb      	strb	r3, [r7, #6]
 8000f36:	e002      	b.n	8000f3e <Txcfr+0xea>
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	71bb      	strb	r3, [r7, #6]
 8000f3e:	79bb      	ldrb	r3, [r7, #6]
 8000f40:	2b09      	cmp	r3, #9
 8000f42:	d9f9      	bls.n	8000f38 <Txcfr+0xe4>
		;

	UP_DAT_H;
 8000f44:	2201      	movs	r2, #1
 8000f46:	2104      	movs	r1, #4
 8000f48:	4811      	ldr	r0, [pc, #68]	@ (8000f90 <Txcfr+0x13c>)
 8000f4a:	f001 fa01 	bl	8002350 <HAL_GPIO_WritePin>
	for (k = 0; k < 10; k++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	71bb      	strb	r3, [r7, #6]
 8000f52:	e002      	b.n	8000f5a <Txcfr+0x106>
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	3301      	adds	r3, #1
 8000f58:	71bb      	strb	r3, [r7, #6]
 8000f5a:	79bb      	ldrb	r3, [r7, #6]
 8000f5c:	2b09      	cmp	r3, #9
 8000f5e:	d9f9      	bls.n	8000f54 <Txcfr+0x100>
		;
	UP_DAT_L;
 8000f60:	2200      	movs	r2, #0
 8000f62:	2104      	movs	r1, #4
 8000f64:	480a      	ldr	r0, [pc, #40]	@ (8000f90 <Txcfr+0x13c>)
 8000f66:	f001 f9f3 	bl	8002350 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f000 fe8c 	bl	8001c88 <HAL_Delay>

	printf("Txcfr_over\n");
 8000f70:	4808      	ldr	r0, [pc, #32]	@ (8000f94 <Txcfr+0x140>)
 8000f72:	f003 fafb 	bl	800456c <puts>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020000 	.word	0x40020000
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000004 	.word	0x20000004
 8000f8c:	08004cc0 	.word	0x08004cc0
 8000f90:	40020400 	.word	0x40020400
 8000f94:	08004cac 	.word	0x08004cac

08000f98 <Txprofile>:
 ** �������� ����AD9910оƬ����profile1,����Ƶ�ʣ����ȵ���ؿ�������
 ** ��ڲ��� ����
 ** ���ڲ��� ����
 ** ����˵�� ����
 **************************************************************/
void Txprofile(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
	uchar m, k;

	CS_L;
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fa4:	481e      	ldr	r0, [pc, #120]	@ (8001020 <Txprofile+0x88>)
 8000fa6:	f001 f9d3 	bl	8002350 <HAL_GPIO_WritePin>
	txd_8bit(0x0e);    //����profile0�����ֵ�ַ
 8000faa:	200e      	movs	r0, #14
 8000fac:	f7ff ff16 	bl	8000ddc <txd_8bit>
	for (m = 0; m < 8; m++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	e008      	b.n	8000fc8 <Txprofile+0x30>
		txd_8bit(profile11[m]);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8001024 <Txprofile+0x8c>)
 8000fba:	5cd3      	ldrb	r3, [r2, r3]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff0d 	bl	8000ddc <txd_8bit>
	for (m = 0; m < 8; m++)
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b07      	cmp	r3, #7
 8000fcc:	d9f3      	bls.n	8000fb6 <Txprofile+0x1e>
	CS_H;
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fd4:	4812      	ldr	r0, [pc, #72]	@ (8001020 <Txprofile+0x88>)
 8000fd6:	f001 f9bb 	bl	8002350 <HAL_GPIO_WritePin>
	for (k = 0; k < 10; k++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	71bb      	strb	r3, [r7, #6]
 8000fde:	e002      	b.n	8000fe6 <Txprofile+0x4e>
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	71bb      	strb	r3, [r7, #6]
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	2b09      	cmp	r3, #9
 8000fea:	d9f9      	bls.n	8000fe0 <Txprofile+0x48>
		;

	UP_DAT_H;
 8000fec:	2201      	movs	r2, #1
 8000fee:	2104      	movs	r1, #4
 8000ff0:	480d      	ldr	r0, [pc, #52]	@ (8001028 <Txprofile+0x90>)
 8000ff2:	f001 f9ad 	bl	8002350 <HAL_GPIO_WritePin>
	for (k = 0; k < 10; k++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	71bb      	strb	r3, [r7, #6]
 8000ffa:	e002      	b.n	8001002 <Txprofile+0x6a>
 8000ffc:	79bb      	ldrb	r3, [r7, #6]
 8000ffe:	3301      	adds	r3, #1
 8001000:	71bb      	strb	r3, [r7, #6]
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	2b09      	cmp	r3, #9
 8001006:	d9f9      	bls.n	8000ffc <Txprofile+0x64>
		;
	UP_DAT_L;
 8001008:	2200      	movs	r2, #0
 800100a:	2104      	movs	r1, #4
 800100c:	4806      	ldr	r0, [pc, #24]	@ (8001028 <Txprofile+0x90>)
 800100e:	f001 f99f 	bl	8002350 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f000 fe38 	bl	8001c88 <HAL_Delay>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40020000 	.word	0x40020000
 8001024:	20000008 	.word	0x20000008
 8001028:	40020400 	.word	0x40020400
 800102c:	00000000 	.word	0x00000000

08001030 <Freq_convert>:
 ** �������� ������Ҫ��Ƶ��ת��Ϊ��Ӧ�Ŀ������ݣ������profile11�����͵�оƬ
 ** ��ڲ��� ��Ŀ��Ƶ�ʣ���λHz����Χ0~420000000
 ** ���ڲ��� ����
 ** ����˵�� ����
 **************************************************************/
void Freq_convert(ulong Freq) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	ulong Temp;
	if (Freq > 400000000)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a19      	ldr	r2, [pc, #100]	@ (80010a0 <Freq_convert+0x70>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d901      	bls.n	8001044 <Freq_convert+0x14>
		Freq = 400000000;
 8001040:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <Freq_convert+0x70>)
 8001042:	607b      	str	r3, [r7, #4]
	Temp = (ulong) Freq * 4.294967296; //������Ƶ�����ӷ�Ϊ�ĸ��ֽ�  4.294967296=(2^32)/1000000000 ��1G ���ڲ�ʱ���ٶȣ�
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff fa01 	bl	800044c <__aeabi_ui2d>
 800104a:	a313      	add	r3, pc, #76	@ (adr r3, 8001098 <Freq_convert+0x68>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f7ff fa76 	bl	8000540 <__aeabi_dmul>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fc82 	bl	8000964 <__aeabi_d2uiz>
 8001060:	4603      	mov	r3, r0
 8001062:	60fb      	str	r3, [r7, #12]
	profile11[7] = (uchar) Temp;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <Freq_convert+0x74>)
 800106a:	71da      	strb	r2, [r3, #7]
	profile11[6] = (uchar)(Temp >> 8);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	0a1b      	lsrs	r3, r3, #8
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <Freq_convert+0x74>)
 8001074:	719a      	strb	r2, [r3, #6]
	profile11[5] = (uchar)(Temp >> 16);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	0c1b      	lsrs	r3, r3, #16
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <Freq_convert+0x74>)
 800107e:	715a      	strb	r2, [r3, #5]
	profile11[4] = (uchar)(Temp >> 24);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	0e1b      	lsrs	r3, r3, #24
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <Freq_convert+0x74>)
 8001088:	711a      	strb	r2, [r3, #4]
	Txprofile();
 800108a:	f7ff ff85 	bl	8000f98 <Txprofile>
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e826d695 	.word	0xe826d695
 800109c:	40112e0b 	.word	0x40112e0b
 80010a0:	17d78400 	.word	0x17d78400
 80010a4:	20000008 	.word	0x20000008

080010a8 <Write_Amplitude>:
 ** �������� �������ȿ������ݱ��浽profile11��д��оƬ
 ** ��ڲ��� �����ȴ�ѧ����Χ1~800
 ** ���ڲ��� ����
 ** ����˵�� ��14λ���ȿ����֣���������0~16383��Ӧ�������0~800mV����
 **************************************************************/
void Write_Amplitude(uint16_t Amp) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
	uint16_t temp = (uint16_t) (Amp / 0.0488311); //���ȴ�С�������ִ�����800/16383=0.0488311
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f9d9 	bl	800046c <__aeabi_i2d>
 80010ba:	a312      	add	r3, pc, #72	@ (adr r3, 8001104 <Write_Amplitude+0x5c>)
 80010bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c0:	f7ff fb68 	bl	8000794 <__aeabi_ddiv>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fc4a 	bl	8000964 <__aeabi_d2uiz>
 80010d0:	4603      	mov	r3, r0
 80010d2:	81fb      	strh	r3, [r7, #14]
	profile11[0] = (temp % 16384) >> 8; //�Ͱ�λ
 80010d4:	89fb      	ldrh	r3, [r7, #14]
 80010d6:	0a1b      	lsrs	r3, r3, #8
 80010d8:	b29b      	uxth	r3, r3
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <Write_Amplitude+0x58>)
 80010e4:	701a      	strb	r2, [r3, #0]
	profile11[1] = (temp % 16384) & 0xff;
 80010e6:	89fb      	ldrh	r3, [r7, #14]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <Write_Amplitude+0x58>)
 80010ec:	705a      	strb	r2, [r3, #1]
	Txprofile();
 80010ee:	f7ff ff53 	bl	8000f98 <Txprofile>
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	f3af 8000 	nop.w
 8001100:	20000008 	.word	0x20000008
 8001104:	d30e2f6e 	.word	0xd30e2f6e
 8001108:	3fa90063 	.word	0x3fa90063

0800110c <ADS8688_Init>:
// ��ڲ���: ��
// �� �� ֵ: ��
// ע������: ��
//
//-----------------------------------------------------------------
void ADS8688_Init(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0

	//GPIO_ADS8688_Configuration();   //MX_GPIO_Init();
	//SPI2_Init();   //MX_SPI_Init();
	RST_L;
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001116:	4823      	ldr	r0, [pc, #140]	@ (80011a4 <ADS8688_Init+0x98>)
 8001118:	f001 f91a 	bl	8002350 <HAL_GPIO_WritePin>
	delay_us(2);
 800111c:	2002      	movs	r0, #2
 800111e:	f000 f8e1 	bl	80012e4 <delay_us>
	RST_H;
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001128:	481e      	ldr	r0, [pc, #120]	@ (80011a4 <ADS8688_Init+0x98>)
 800112a:	f001 f911 	bl	8002350 <HAL_GPIO_WritePin>
	DAISY_L;
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001134:	481b      	ldr	r0, [pc, #108]	@ (80011a4 <ADS8688_Init+0x98>)
 8001136:	f001 f90b 	bl	8002350 <HAL_GPIO_WritePin>

	ADS8688_Write_Command(RST);	// �����λģʽ
 800113a:	f44f 4005 	mov.w	r0, #34048	@ 0x8500
 800113e:	f000 f833 	bl	80011a8 <ADS8688_Write_Command>
	delay_us(2);
 8001142:	2002      	movs	r0, #2
 8001144:	f000 f8ce 	bl	80012e4 <delay_us>
	ADS8688_Write_Program(CH0_INPUT_RANGE, VREF_B_125);	// ͨ��0�����뷶ΧΪ��5.12V
 8001148:	2101      	movs	r1, #1
 800114a:	2005      	movs	r0, #5
 800114c:	f000 f858 	bl	8001200 <ADS8688_Write_Program>
	ADS8688_Write_Program(CH1_INPUT_RANGE, VREF_B_125);	// ͨ��1�����뷶ΧΪ��5.12V
 8001150:	2101      	movs	r1, #1
 8001152:	2006      	movs	r0, #6
 8001154:	f000 f854 	bl	8001200 <ADS8688_Write_Program>
	ADS8688_Write_Program(CH2_INPUT_RANGE, VREF_B_125);	// ͨ��2�����뷶ΧΪ��5.12V
 8001158:	2101      	movs	r1, #1
 800115a:	2007      	movs	r0, #7
 800115c:	f000 f850 	bl	8001200 <ADS8688_Write_Program>
	ADS8688_Write_Program(CH3_INPUT_RANGE, VREF_B_125);	// ͨ��3�����뷶ΧΪ��5.12V
 8001160:	2101      	movs	r1, #1
 8001162:	2008      	movs	r0, #8
 8001164:	f000 f84c 	bl	8001200 <ADS8688_Write_Program>
	ADS8688_Write_Program(CH4_INPUT_RANGE, VREF_B_125);	// ͨ��4�����뷶ΧΪ��5.12V
 8001168:	2101      	movs	r1, #1
 800116a:	2009      	movs	r0, #9
 800116c:	f000 f848 	bl	8001200 <ADS8688_Write_Program>
	ADS8688_Write_Program(CH5_INPUT_RANGE, VREF_B_125);	// ͨ��5�����뷶ΧΪ��5.12V
 8001170:	2101      	movs	r1, #1
 8001172:	200a      	movs	r0, #10
 8001174:	f000 f844 	bl	8001200 <ADS8688_Write_Program>
	ADS8688_Write_Program(CH6_INPUT_RANGE, VREF_B_125);	// ͨ��6�����뷶ΧΪ��5.12V
 8001178:	2101      	movs	r1, #1
 800117a:	200b      	movs	r0, #11
 800117c:	f000 f840 	bl	8001200 <ADS8688_Write_Program>
	ADS8688_Write_Program(CH7_INPUT_RANGE, VREF_B_125);	// ͨ��7�����뷶ΧΪ��5.12V
 8001180:	2101      	movs	r1, #1
 8001182:	200c      	movs	r0, #12
 8001184:	f000 f83c 	bl	8001200 <ADS8688_Write_Program>
	ADS8688_Write_Program(CH_PWR_DN, 0x00);
 8001188:	2100      	movs	r1, #0
 800118a:	2002      	movs	r0, #2
 800118c:	f000 f838 	bl	8001200 <ADS8688_Write_Program>
	ADS8688_Write_Program(AUTO_SEQ_EN, 0xFF);
 8001190:	21ff      	movs	r1, #255	@ 0xff
 8001192:	2001      	movs	r0, #1
 8001194:	f000 f834 	bl	8001200 <ADS8688_Write_Program>
	ADS8688_Write_Command(AUTO_RST);
 8001198:	f44f 4020 	mov.w	r0, #40960	@ 0xa000
 800119c:	f000 f804 	bl	80011a8 <ADS8688_Write_Command>
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000

080011a8 <ADS8688_Write_Command>:
// ��ڲ���: com������
// �� �� ֵ: ��
// ע������: ��
//
//-----------------------------------------------------------------
void ADS8688_Write_Command(uint16_t com) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
	uint8_t wr_data[2] = { 0x00, 0x00 };
 80011b2:	2300      	movs	r3, #0
 80011b4:	81bb      	strh	r3, [r7, #12]

	wr_data[0] = (uint8_t) (com >> 8);
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	733b      	strb	r3, [r7, #12]
	wr_data[1] = (uint8_t) (com & 0x00FF);
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	737b      	strb	r3, [r7, #13]

	CS_L;
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011cc:	480a      	ldr	r0, [pc, #40]	@ (80011f8 <ADS8688_Write_Command+0x50>)
 80011ce:	f001 f8bf 	bl	8002350 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, wr_data, 2, 0xFFFF);
 80011d2:	f107 010c 	add.w	r1, r7, #12
 80011d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011da:	2202      	movs	r2, #2
 80011dc:	4807      	ldr	r0, [pc, #28]	@ (80011fc <ADS8688_Write_Command+0x54>)
 80011de:	f001 fdb2 	bl	8002d46 <HAL_SPI_Transmit>
	CS_H;
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011e8:	4803      	ldr	r0, [pc, #12]	@ (80011f8 <ADS8688_Write_Command+0x50>)
 80011ea:	f001 f8b1 	bl	8002350 <HAL_GPIO_WritePin>
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40020400 	.word	0x40020400
 80011fc:	2000089c 	.word	0x2000089c

08001200 <ADS8688_Write_Program>:
//					 data������
// �� �� ֵ: ��
// ע������: ��
//
//-----------------------------------------------------------------
void ADS8688_Write_Program(uint8_t addr, uint8_t data) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	460a      	mov	r2, r1
 800120a:	71fb      	strb	r3, [r7, #7]
 800120c:	4613      	mov	r3, r2
 800120e:	71bb      	strb	r3, [r7, #6]
	uint8_t wr_data[2] = { 0x00, 0x00 };
 8001210:	2300      	movs	r3, #0
 8001212:	81bb      	strh	r3, [r7, #12]

	wr_data[0] = (addr << 1) | 0x01;
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	b25b      	sxtb	r3, r3
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	b25b      	sxtb	r3, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	733b      	strb	r3, [r7, #12]
	wr_data[1] = data;
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	737b      	strb	r3, [r7, #13]

	CS_L;
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001230:	480a      	ldr	r0, [pc, #40]	@ (800125c <ADS8688_Write_Program+0x5c>)
 8001232:	f001 f88d 	bl	8002350 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, wr_data, 2, 0xFFFF);
 8001236:	f107 010c 	add.w	r1, r7, #12
 800123a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800123e:	2202      	movs	r2, #2
 8001240:	4807      	ldr	r0, [pc, #28]	@ (8001260 <ADS8688_Write_Program+0x60>)
 8001242:	f001 fd80 	bl	8002d46 <HAL_SPI_Transmit>
	CS_H;
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800124c:	4803      	ldr	r0, [pc, #12]	@ (800125c <ADS8688_Write_Program+0x5c>)
 800124e:	f001 f87f 	bl	8002350 <HAL_GPIO_WritePin>
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40020400 	.word	0x40020400
 8001260:	2000089c 	.word	0x2000089c

08001264 <Get_AUTO_RST_Mode_ADC_Data>:
//					 *data����ȡ�õ�������
// �� �� ֵ: ��
// ע������: ��
//
//-----------------------------------------------------------------
void Get_AUTO_RST_Mode_ADC_Data(uint8_t ch_num, uint16_t *data) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af02      	add	r7, sp, #8
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
	uint8_t Rxdata[4], i;
	uint8_t wr_data[4] = { 0x00, 0x00, 0x00, 0x00 };
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < ch_num; i++) {
 8001274:	2300      	movs	r3, #0
 8001276:	75fb      	strb	r3, [r7, #23]
 8001278:	e027      	b.n	80012ca <Get_AUTO_RST_Mode_ADC_Data+0x66>
		CS_L;
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001280:	4816      	ldr	r0, [pc, #88]	@ (80012dc <Get_AUTO_RST_Mode_ADC_Data+0x78>)
 8001282:	f001 f865 	bl	8002350 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) wr_data, (uint8_t*) Rxdata,
 8001286:	f107 0210 	add.w	r2, r7, #16
 800128a:	f107 010c 	add.w	r1, r7, #12
 800128e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2304      	movs	r3, #4
 8001296:	4812      	ldr	r0, [pc, #72]	@ (80012e0 <Get_AUTO_RST_Mode_ADC_Data+0x7c>)
 8001298:	f001 fe99 	bl	8002fce <HAL_SPI_TransmitReceive>
				4, 0xFFFF);
		CS_H;
 800129c:	2201      	movs	r2, #1
 800129e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012a2:	480e      	ldr	r0, [pc, #56]	@ (80012dc <Get_AUTO_RST_Mode_ADC_Data+0x78>)
 80012a4:	f001 f854 	bl	8002350 <HAL_GPIO_WritePin>
		*(data + i) = ((uint16_t) Rxdata[2] << 8) | Rxdata[3];
 80012a8:	7cbb      	ldrb	r3, [r7, #18]
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	7cfb      	ldrb	r3, [r7, #19]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b219      	sxth	r1, r3
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	b28a      	uxth	r2, r1
 80012c2:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < ch_num; i++) {
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	3301      	adds	r3, #1
 80012c8:	75fb      	strb	r3, [r7, #23]
 80012ca:	7dfa      	ldrb	r2, [r7, #23]
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d3d3      	bcc.n	800127a <Get_AUTO_RST_Mode_ADC_Data+0x16>
	}
}
 80012d2:	bf00      	nop
 80012d4:	bf00      	nop
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40020400 	.word	0x40020400
 80012e0:	2000089c 	.word	0x2000089c

080012e4 <delay_us>:
void delay_ns(u8 t) {
	do {
		;
	} while (--t);
}
void delay_us(u32 nus) {
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	@ 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	u32 ticks;
	u32 told, tnow, tcnt = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
	u32 reload = SysTick->LOAD; //LOAD的值
 80012f0:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <delay_us+0x78>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	617b      	str	r3, [r7, #20]
	ticks = nus * fac_us;       //需要的节拍数
 80012f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001360 <delay_us+0x7c>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	fb02 f303 	mul.w	r3, r2, r3
 8001302:	613b      	str	r3, [r7, #16]
	told = SysTick->VAL;        //刚进⼊时的计数器值
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <delay_us+0x78>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	61fb      	str	r3, [r7, #28]
	while (1) {
		tnow = SysTick->VAL;
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <delay_us+0x78>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	60fb      	str	r3, [r7, #12]
		if (tnow != told) {
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	429a      	cmp	r2, r3
 8001316:	d0f8      	beq.n	800130a <delay_us+0x26>
			if (tnow < told)
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	429a      	cmp	r2, r3
 800131e:	d206      	bcs.n	800132e <delay_us+0x4a>
				tcnt += told - tnow; //这⾥注意⼀下SYSTICK是⼀个递减的计数器就可以了.
 8001320:	69fa      	ldr	r2, [r7, #28]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4413      	add	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
 800132c:	e007      	b.n	800133e <delay_us+0x5a>
			else
				tcnt += reload - tnow + told;
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	1ad2      	subs	r2, r2, r3
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	4413      	add	r3, r2
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4413      	add	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
			told = tnow;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	61fb      	str	r3, [r7, #28]
			if (tcnt >= ticks)
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	429a      	cmp	r2, r3
 8001348:	d200      	bcs.n	800134c <delay_us+0x68>
		tnow = SysTick->VAL;
 800134a:	e7de      	b.n	800130a <delay_us+0x26>
				break; //时间超过/等于要延迟的时间,则退出.
 800134c:	bf00      	nop
		}
	};
}
 800134e:	bf00      	nop
 8001350:	3724      	adds	r7, #36	@ 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e010 	.word	0xe000e010
 8001360:	20000094 	.word	0x20000094

08001364 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08c      	sub	sp, #48	@ 0x30
 8001368:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	4b65      	ldr	r3, [pc, #404]	@ (8001514 <MX_GPIO_Init+0x1b0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a64      	ldr	r2, [pc, #400]	@ (8001514 <MX_GPIO_Init+0x1b0>)
 8001384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b62      	ldr	r3, [pc, #392]	@ (8001514 <MX_GPIO_Init+0x1b0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	4b5e      	ldr	r3, [pc, #376]	@ (8001514 <MX_GPIO_Init+0x1b0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a5d      	ldr	r2, [pc, #372]	@ (8001514 <MX_GPIO_Init+0x1b0>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001514 <MX_GPIO_Init+0x1b0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	4b57      	ldr	r3, [pc, #348]	@ (8001514 <MX_GPIO_Init+0x1b0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a56      	ldr	r2, [pc, #344]	@ (8001514 <MX_GPIO_Init+0x1b0>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b54      	ldr	r3, [pc, #336]	@ (8001514 <MX_GPIO_Init+0x1b0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b50      	ldr	r3, [pc, #320]	@ (8001514 <MX_GPIO_Init+0x1b0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a4f      	ldr	r2, [pc, #316]	@ (8001514 <MX_GPIO_Init+0x1b0>)
 80013d8:	f043 0310 	orr.w	r3, r3, #16
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b4d      	ldr	r3, [pc, #308]	@ (8001514 <MX_GPIO_Init+0x1b0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	4b49      	ldr	r3, [pc, #292]	@ (8001514 <MX_GPIO_Init+0x1b0>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a48      	ldr	r2, [pc, #288]	@ (8001514 <MX_GPIO_Init+0x1b0>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b46      	ldr	r3, [pc, #280]	@ (8001514 <MX_GPIO_Init+0x1b0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b42      	ldr	r3, [pc, #264]	@ (8001514 <MX_GPIO_Init+0x1b0>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a41      	ldr	r2, [pc, #260]	@ (8001514 <MX_GPIO_Init+0x1b0>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b3f      	ldr	r3, [pc, #252]	@ (8001514 <MX_GPIO_Init+0x1b0>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRO_Pin|IOUP_Pin|ADCCS_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	f640 0106 	movw	r1, #2054	@ 0x806
 8001428:	483b      	ldr	r0, [pc, #236]	@ (8001518 <MX_GPIO_Init+0x1b4>)
 800142a:	f000 ff91 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADCDAISY_Pin|ADCRST_Pin, GPIO_PIN_SET);
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001434:	4839      	ldr	r0, [pc, #228]	@ (800151c <MX_GPIO_Init+0x1b8>)
 8001436:	f000 ff8b 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PF1_Pin|PWR_Pin|SDIO_Pin|DPH_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 5187 	mov.w	r1, #4320	@ 0x10e0
 8001440:	4835      	ldr	r0, [pc, #212]	@ (8001518 <MX_GPIO_Init+0x1b4>)
 8001442:	f000 ff85 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800144c:	4834      	ldr	r0, [pc, #208]	@ (8001520 <MX_GPIO_Init+0x1bc>)
 800144e:	f000 ff7f 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RST_Pin|SCK_Pin|DRC_Pin|OSK_Pin
 8001452:	2201      	movs	r2, #1
 8001454:	213f      	movs	r1, #63	@ 0x3f
 8001456:	4833      	ldr	r0, [pc, #204]	@ (8001524 <MX_GPIO_Init+0x1c0>)
 8001458:	f000 ff7a 	bl	8002350 <HAL_GPIO_WritePin>
                          |PF0_Pin|PF2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : DRO_Pin IOUP_Pin */
  GPIO_InitStruct.Pin = DRO_Pin|IOUP_Pin;
 800145c:	2306      	movs	r3, #6
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001460:	2301      	movs	r3, #1
 8001462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	4829      	ldr	r0, [pc, #164]	@ (8001518 <MX_GPIO_Init+0x1b4>)
 8001474:	f000 fdd0 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCDAISY_Pin ADCRST_Pin */
  GPIO_InitStruct.Pin = ADCDAISY_Pin|ADCRST_Pin;
 8001478:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001482:	2301      	movs	r3, #1
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001486:	2302      	movs	r3, #2
 8001488:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	4822      	ldr	r0, [pc, #136]	@ (800151c <MX_GPIO_Init+0x1b8>)
 8001492:	f000 fdc1 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADCCS_Pin */
  GPIO_InitStruct.Pin = ADCCS_Pin;
 8001496:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a4:	2302      	movs	r3, #2
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ADCCS_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	481a      	ldr	r0, [pc, #104]	@ (8001518 <MX_GPIO_Init+0x1b4>)
 80014b0:	f000 fdb2 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1_Pin PWR_Pin SDIO_Pin DPH_Pin */
  GPIO_InitStruct.Pin = PF1_Pin|PWR_Pin|SDIO_Pin|DPH_Pin;
 80014b4:	f44f 5387 	mov.w	r3, #4320	@ 0x10e0
 80014b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c2:	2302      	movs	r3, #2
 80014c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	4812      	ldr	r0, [pc, #72]	@ (8001518 <MX_GPIO_Init+0x1b4>)
 80014ce:	f000 fda3 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80014d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e0:	2302      	movs	r3, #2
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	480d      	ldr	r0, [pc, #52]	@ (8001520 <MX_GPIO_Init+0x1bc>)
 80014ec:	f000 fd94 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin SCK_Pin DRC_Pin OSK_Pin
                           PF0_Pin PF2_Pin */
  GPIO_InitStruct.Pin = RST_Pin|SCK_Pin|DRC_Pin|OSK_Pin
 80014f0:	233f      	movs	r3, #63	@ 0x3f
 80014f2:	61fb      	str	r3, [r7, #28]
                          |PF0_Pin|PF2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fc:	2302      	movs	r3, #2
 80014fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	4807      	ldr	r0, [pc, #28]	@ (8001524 <MX_GPIO_Init+0x1c0>)
 8001508:	f000 fd86 	bl	8002018 <HAL_GPIO_Init>

}
 800150c:	bf00      	nop
 800150e:	3730      	adds	r7, #48	@ 0x30
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40023800 	.word	0x40023800
 8001518:	40020400 	.word	0x40020400
 800151c:	40021000 	.word	0x40021000
 8001520:	40020000 	.word	0x40020000
 8001524:	40020c00 	.word	0x40020c00

08001528 <adcin>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void adcin() {
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
	uint16_t i;
	for (i = 0; i < ADCPOINT; i++) {
 800152e:	2300      	movs	r3, #0
 8001530:	80fb      	strh	r3, [r7, #6]
 8001532:	e035      	b.n	80015a0 <adcin+0x78>
		uint16_t j;
		Get_AUTO_RST_Mode_ADC_Data(ADCCHS, ADS_CH_Value);
 8001534:	4924      	ldr	r1, [pc, #144]	@ (80015c8 <adcin+0xa0>)
 8001536:	2001      	movs	r0, #1
 8001538:	f7ff fe94 	bl	8001264 <Get_AUTO_RST_Mode_ADC_Data>

		for (j = 0; j < ADCCHS; j++) {
 800153c:	2300      	movs	r3, #0
 800153e:	80bb      	strh	r3, [r7, #4]
 8001540:	e028      	b.n	8001594 <adcin+0x6c>
//			ADS_CH_Value[j] = Get_MAN_Ch_n_Mode_Data();
			adc_data[j][i] = (ADS_CH_Value[j] - 32768) * 20.48 / 65535;
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	4a20      	ldr	r2, [pc, #128]	@ (80015c8 <adcin+0xa0>)
 8001546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800154a:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe ff8c 	bl	800046c <__aeabi_i2d>
 8001554:	a318      	add	r3, pc, #96	@ (adr r3, 80015b8 <adcin+0x90>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7fe fff1 	bl	8000540 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	a316      	add	r3, pc, #88	@ (adr r3, 80015c0 <adcin+0x98>)
 8001568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156c:	f7ff f912 	bl	8000794 <__aeabi_ddiv>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	88bd      	ldrh	r5, [r7, #4]
 8001576:	88fc      	ldrh	r4, [r7, #6]
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff fa12 	bl	80009a4 <__aeabi_d2f>
 8001580:	4602      	mov	r2, r0
 8001582:	4912      	ldr	r1, [pc, #72]	@ (80015cc <adcin+0xa4>)
 8001584:	026b      	lsls	r3, r5, #9
 8001586:	4423      	add	r3, r4
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	440b      	add	r3, r1
 800158c:	601a      	str	r2, [r3, #0]
		for (j = 0; j < ADCCHS; j++) {
 800158e:	88bb      	ldrh	r3, [r7, #4]
 8001590:	3301      	adds	r3, #1
 8001592:	80bb      	strh	r3, [r7, #4]
 8001594:	88bb      	ldrh	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0d3      	beq.n	8001542 <adcin+0x1a>
	for (i = 0; i < ADCPOINT; i++) {
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	3301      	adds	r3, #1
 800159e:	80fb      	strh	r3, [r7, #6]
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015a6:	d3c5      	bcc.n	8001534 <adcin+0xc>
		}

	}
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bdb0      	pop	{r4, r5, r7, pc}
 80015b2:	bf00      	nop
 80015b4:	f3af 8000 	nop.w
 80015b8:	47ae147b 	.word	0x47ae147b
 80015bc:	40347ae1 	.word	0x40347ae1
 80015c0:	00000000 	.word	0x00000000
 80015c4:	40efffe0 	.word	0x40efffe0
 80015c8:	20000098 	.word	0x20000098
 80015cc:	2000009c 	.word	0x2000009c

080015d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d4:	f000 fae6 	bl	8001ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d8:	f000 f81a 	bl	8001610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015dc:	f7ff fec2 	bl	8001364 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80015e0:	f000 fa3c 	bl	8001a5c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80015e4:	f000 f884 	bl	80016f0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(72);	//涓��靛欢�剁��寰�绋冲��
 80015e8:	2048      	movs	r0, #72	@ 0x48
 80015ea:	f000 fb4d 	bl	8001c88 <HAL_Delay>
	Init_ad9910();	//��濮���AD9910����
 80015ee:	f7ff fbbf 	bl	8000d70 <Init_ad9910>
	HAL_Delay(72);
 80015f2:	2048      	movs	r0, #72	@ 0x48
 80015f4:	f000 fb48 	bl	8001c88 <HAL_Delay>
//RAM娉㈠舰�����ㄦā寮���缃�
//AD9910_RAM_WAVE_Set(SQUARE_WAVE);	// ��缃�RAM娉㈠舰�����ㄦā寮�
//娉ㄩ��锛�SQUARE_WAVE琛ㄧず�规尝锛�TRIG_WAVE琛ㄧず瑙���娉㈠舰锛�SQUARE_WAVE琛ㄧず�规尝锛�SINC_WAVE琛ㄧずSINC娉㈠舰

//�烘��棰�����骞�搴�璁剧疆
	Freq_convert(1000);   // 璁剧疆棰���涓�1kHz锛���浣�Hz
 80015f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015fc:	f7ff fd18 	bl	8001030 <Freq_convert>
	Write_Amplitude(200); // 璁剧疆骞�搴��硷�1-800mV���村��锛�锛�杩���璁剧疆涓�200瀵瑰���骞�搴�
 8001600:	20c8      	movs	r0, #200	@ 0xc8
 8001602:	f7ff fd51 	bl	80010a8 <Write_Amplitude>
	ADS8688_Init();
 8001606:	f7ff fd81 	bl	800110c <ADS8688_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
//		sprintf(str, "n0.val=%d", 700);
//		tjc_send_string(str);
		adcin();
 800160a:	f7ff ff8d 	bl	8001528 <adcin>
 800160e:	e7fc      	b.n	800160a <main+0x3a>

08001610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b094      	sub	sp, #80	@ 0x50
 8001614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001616:	f107 0320 	add.w	r3, r7, #32
 800161a:	2230      	movs	r2, #48	@ 0x30
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f003 f884 	bl	800472c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <SystemClock_Config+0xcc>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	4a27      	ldr	r2, [pc, #156]	@ (80016dc <SystemClock_Config+0xcc>)
 800163e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001642:	6413      	str	r3, [r2, #64]	@ 0x40
 8001644:	4b25      	ldr	r3, [pc, #148]	@ (80016dc <SystemClock_Config+0xcc>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	4b22      	ldr	r3, [pc, #136]	@ (80016e0 <SystemClock_Config+0xd0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a21      	ldr	r2, [pc, #132]	@ (80016e0 <SystemClock_Config+0xd0>)
 800165a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <SystemClock_Config+0xd0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800166c:	2301      	movs	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001670:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001676:	2302      	movs	r3, #2
 8001678:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800167a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800167e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001680:	2319      	movs	r3, #25
 8001682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001684:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001688:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800168a:	2302      	movs	r3, #2
 800168c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800168e:	2304      	movs	r3, #4
 8001690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001692:	f107 0320 	add.w	r3, r7, #32
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fe74 	bl	8002384 <HAL_RCC_OscConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016a2:	f000 f81f 	bl	80016e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a6:	230f      	movs	r3, #15
 80016a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016aa:	2302      	movs	r3, #2
 80016ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016b2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	2105      	movs	r1, #5
 80016c4:	4618      	mov	r0, r3
 80016c6:	f001 f8d5 	bl	8002874 <HAL_RCC_ClockConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016d0:	f000 f808 	bl	80016e4 <Error_Handler>
  }
}
 80016d4:	bf00      	nop
 80016d6:	3750      	adds	r7, #80	@ 0x50
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40007000 	.word	0x40007000

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <Error_Handler+0x8>

080016f0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80016f4:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <MX_SPI2_Init+0x64>)
 80016f6:	4a18      	ldr	r2, [pc, #96]	@ (8001758 <MX_SPI2_Init+0x68>)
 80016f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016fa:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <MX_SPI2_Init+0x64>)
 80016fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001700:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001702:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <MX_SPI2_Init+0x64>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <MX_SPI2_Init+0x64>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800170e:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <MX_SPI2_Init+0x64>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001714:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <MX_SPI2_Init+0x64>)
 8001716:	2201      	movs	r2, #1
 8001718:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800171a:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <MX_SPI2_Init+0x64>)
 800171c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001720:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001722:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <MX_SPI2_Init+0x64>)
 8001724:	2220      	movs	r2, #32
 8001726:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001728:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <MX_SPI2_Init+0x64>)
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <MX_SPI2_Init+0x64>)
 8001730:	2200      	movs	r2, #0
 8001732:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001734:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <MX_SPI2_Init+0x64>)
 8001736:	2200      	movs	r2, #0
 8001738:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <MX_SPI2_Init+0x64>)
 800173c:	220a      	movs	r2, #10
 800173e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001740:	4804      	ldr	r0, [pc, #16]	@ (8001754 <MX_SPI2_Init+0x64>)
 8001742:	f001 fa77 	bl	8002c34 <HAL_SPI_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800174c:	f7ff ffca 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2000089c 	.word	0x2000089c
 8001758:	40003800 	.word	0x40003800

0800175c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	@ 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a28      	ldr	r2, [pc, #160]	@ (800181c <HAL_SPI_MspInit+0xc0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d14a      	bne.n	8001814 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	4b27      	ldr	r3, [pc, #156]	@ (8001820 <HAL_SPI_MspInit+0xc4>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	4a26      	ldr	r2, [pc, #152]	@ (8001820 <HAL_SPI_MspInit+0xc4>)
 8001788:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800178c:	6413      	str	r3, [r2, #64]	@ 0x40
 800178e:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <HAL_SPI_MspInit+0xc4>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	4b20      	ldr	r3, [pc, #128]	@ (8001820 <HAL_SPI_MspInit+0xc4>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001820 <HAL_SPI_MspInit+0xc4>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001820 <HAL_SPI_MspInit+0xc4>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <HAL_SPI_MspInit+0xc4>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a18      	ldr	r2, [pc, #96]	@ (8001820 <HAL_SPI_MspInit+0xc4>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <HAL_SPI_MspInit+0xc4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017d2:	230c      	movs	r3, #12
 80017d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017e2:	2305      	movs	r3, #5
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	480d      	ldr	r0, [pc, #52]	@ (8001824 <HAL_SPI_MspInit+0xc8>)
 80017ee:	f000 fc13 	bl	8002018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001800:	2303      	movs	r3, #3
 8001802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001804:	2305      	movs	r3, #5
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4619      	mov	r1, r3
 800180e:	4806      	ldr	r0, [pc, #24]	@ (8001828 <HAL_SPI_MspInit+0xcc>)
 8001810:	f000 fc02 	bl	8002018 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001814:	bf00      	nop
 8001816:	3728      	adds	r7, #40	@ 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40003800 	.word	0x40003800
 8001820:	40023800 	.word	0x40023800
 8001824:	40020800 	.word	0x40020800
 8001828:	40020400 	.word	0x40020400

0800182c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b10      	ldr	r3, [pc, #64]	@ (8001878 <HAL_MspInit+0x4c>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183a:	4a0f      	ldr	r2, [pc, #60]	@ (8001878 <HAL_MspInit+0x4c>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001840:	6453      	str	r3, [r2, #68]	@ 0x44
 8001842:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <HAL_MspInit+0x4c>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <HAL_MspInit+0x4c>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	4a08      	ldr	r2, [pc, #32]	@ (8001878 <HAL_MspInit+0x4c>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	@ 0x40
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_MspInit+0x4c>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <NMI_Handler+0x4>

08001884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <MemManage_Handler+0x4>

08001894 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d2:	f000 f9b9 	bl	8001c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018e0:	4802      	ldr	r0, [pc, #8]	@ (80018ec <USART1_IRQHandler+0x10>)
 80018e2:	f001 fe49 	bl	8003578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200008f8 	.word	0x200008f8

080018f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	e00a      	b.n	8001918 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001902:	f3af 8000 	nop.w
 8001906:	4601      	mov	r1, r0
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	60ba      	str	r2, [r7, #8]
 800190e:	b2ca      	uxtb	r2, r1
 8001910:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbf0      	blt.n	8001902 <_read+0x12>
  }

  return len;
 8001920:	687b      	ldr	r3, [r7, #4]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e009      	b.n	8001950 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	60ba      	str	r2, [r7, #8]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	dbf1      	blt.n	800193c <_write+0x12>
  }
  return len;
 8001958:	687b      	ldr	r3, [r7, #4]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_close>:

int _close(int file)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800198a:	605a      	str	r2, [r3, #4]
  return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <_isatty>:

int _isatty(int file)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d4:	4a14      	ldr	r2, [pc, #80]	@ (8001a28 <_sbrk+0x5c>)
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <_sbrk+0x60>)
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e0:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e8:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <_sbrk+0x64>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	@ (8001a34 <_sbrk+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ee:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d207      	bcs.n	8001a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019fc:	f002 fee4 	bl	80047c8 <__errno>
 8001a00:	4603      	mov	r3, r0
 8001a02:	220c      	movs	r2, #12
 8001a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	e009      	b.n	8001a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a0c:	4b08      	ldr	r3, [pc, #32]	@ (8001a30 <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a12:	4b07      	ldr	r3, [pc, #28]	@ (8001a30 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a05      	ldr	r2, [pc, #20]	@ (8001a30 <_sbrk+0x64>)
 8001a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20020000 	.word	0x20020000
 8001a2c:	00000400 	.word	0x00000400
 8001a30:	200008f4 	.word	0x200008f4
 8001a34:	20000a90 	.word	0x20000a90

08001a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a3c:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <SystemInit+0x20>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a42:	4a05      	ldr	r2, [pc, #20]	@ (8001a58 <SystemInit+0x20>)
 8001a44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <MX_USART1_UART_Init+0x50>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a94:	f001 fd20 	bl	80034d8 <HAL_UART_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a9e:	f7ff fe21 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200008f8 	.word	0x200008f8
 8001aac:	40011000 	.word	0x40011000

08001ab0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	@ 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a1d      	ldr	r2, [pc, #116]	@ (8001b44 <HAL_UART_MspInit+0x94>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d134      	bne.n	8001b3c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b48 <HAL_UART_MspInit+0x98>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ada:	4a1b      	ldr	r2, [pc, #108]	@ (8001b48 <HAL_UART_MspInit+0x98>)
 8001adc:	f043 0310 	orr.w	r3, r3, #16
 8001ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ae2:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <HAL_UART_MspInit+0x98>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <HAL_UART_MspInit+0x98>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a14      	ldr	r2, [pc, #80]	@ (8001b48 <HAL_UART_MspInit+0x98>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <HAL_UART_MspInit+0x98>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b0a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b1c:	2307      	movs	r3, #7
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	4809      	ldr	r0, [pc, #36]	@ (8001b4c <HAL_UART_MspInit+0x9c>)
 8001b28:	f000 fa76 	bl	8002018 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2102      	movs	r1, #2
 8001b30:	2025      	movs	r0, #37	@ 0x25
 8001b32:	f000 f9a8 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b36:	2025      	movs	r0, #37	@ 0x25
 8001b38:	f000 f9c1 	bl	8001ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	3728      	adds	r7, #40	@ 0x28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40011000 	.word	0x40011000
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020000 	.word	0x40020000

08001b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b88 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b54:	f7ff ff70 	bl	8001a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b58:	480c      	ldr	r0, [pc, #48]	@ (8001b8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b5a:	490d      	ldr	r1, [pc, #52]	@ (8001b90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b70:	4c0a      	ldr	r4, [pc, #40]	@ (8001b9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b7e:	f002 fe29 	bl	80047d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b82:	f7ff fd25 	bl	80015d0 <main>
  bx  lr    
 8001b86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b90:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001b94:	08004cec 	.word	0x08004cec
  ldr r2, =_sbss
 8001b98:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001b9c:	20000a90 	.word	0x20000a90

08001ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba0:	e7fe      	b.n	8001ba0 <ADC_IRQHandler>
	...

08001ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <HAL_Init+0x40>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0d      	ldr	r2, [pc, #52]	@ (8001be4 <HAL_Init+0x40>)
 8001bae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001be4 <HAL_Init+0x40>)
 8001bba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc0:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a07      	ldr	r2, [pc, #28]	@ (8001be4 <HAL_Init+0x40>)
 8001bc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bcc:	2003      	movs	r0, #3
 8001bce:	f000 f94f 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f000 f808 	bl	8001be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd8:	f7ff fe28 	bl	800182c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023c00 	.word	0x40023c00

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <HAL_InitTick+0x54>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <HAL_InitTick+0x58>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f967 	bl	8001eda <HAL_SYSTICK_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00e      	b.n	8001c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d80a      	bhi.n	8001c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f000 f92f 	bl	8001e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c28:	4a06      	ldr	r2, [pc, #24]	@ (8001c44 <HAL_InitTick+0x5c>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000010 	.word	0x20000010
 8001c40:	20000018 	.word	0x20000018
 8001c44:	20000014 	.word	0x20000014

08001c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_IncTick+0x20>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_IncTick+0x24>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a04      	ldr	r2, [pc, #16]	@ (8001c6c <HAL_IncTick+0x24>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000018 	.word	0x20000018
 8001c6c:	20000940 	.word	0x20000940

08001c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b03      	ldr	r3, [pc, #12]	@ (8001c84 <HAL_GetTick+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000940 	.word	0x20000940

08001c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff ffee 	bl	8001c70 <HAL_GetTick>
 8001c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d005      	beq.n	8001cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <HAL_Delay+0x44>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cae:	bf00      	nop
 8001cb0:	f7ff ffde 	bl	8001c70 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d8f7      	bhi.n	8001cb0 <HAL_Delay+0x28>
  {
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000018 	.word	0x20000018

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	@ (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4907      	ldr	r1, [pc, #28]	@ (8001d6c <__NVIC_EnableIRQ+0x38>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2001      	movs	r0, #1
 8001d56:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	@ (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	@ (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	@ 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	@ 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	@ (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f7ff ff8e 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff29 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e98:	f7ff ff3e 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	6978      	ldr	r0, [r7, #20]
 8001ea4:	f7ff ff8e 	bl	8001dc4 <NVIC_EncodePriority>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff5d 	bl	8001d70 <__NVIC_SetPriority>
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff31 	bl	8001d34 <__NVIC_EnableIRQ>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffa2 	bl	8001e2c <SysTick_Config>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f00:	f7ff feb6 	bl	8001c70 <HAL_GetTick>
 8001f04:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d008      	beq.n	8001f24 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2280      	movs	r2, #128	@ 0x80
 8001f16:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e052      	b.n	8001fca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0216 	bic.w	r2, r2, #22
 8001f32:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f42:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d103      	bne.n	8001f54 <HAL_DMA_Abort+0x62>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0208 	bic.w	r2, r2, #8
 8001f62:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f74:	e013      	b.n	8001f9e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f76:	f7ff fe7b 	bl	8001c70 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d90c      	bls.n	8001f9e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2220      	movs	r2, #32
 8001f88:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e015      	b.n	8001fca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1e4      	bne.n	8001f76 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb0:	223f      	movs	r2, #63	@ 0x3f
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d004      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2280      	movs	r2, #128	@ 0x80
 8001fea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e00c      	b.n	800200a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2205      	movs	r2, #5
 8001ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	@ 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	e16b      	b.n	800230c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002034:	2201      	movs	r2, #1
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	429a      	cmp	r2, r3
 800204e:	f040 815a 	bne.w	8002306 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b01      	cmp	r3, #1
 800205c:	d005      	beq.n	800206a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002066:	2b02      	cmp	r3, #2
 8002068:	d130      	bne.n	80020cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	2203      	movs	r2, #3
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a0:	2201      	movs	r2, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 0201 	and.w	r2, r3, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d017      	beq.n	8002108 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	2203      	movs	r2, #3
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d123      	bne.n	800215c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	08da      	lsrs	r2, r3, #3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3208      	adds	r2, #8
 800211c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	220f      	movs	r2, #15
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	08da      	lsrs	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3208      	adds	r2, #8
 8002156:	69b9      	ldr	r1, [r7, #24]
 8002158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0203 	and.w	r2, r3, #3
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80b4 	beq.w	8002306 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b60      	ldr	r3, [pc, #384]	@ (8002324 <HAL_GPIO_Init+0x30c>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a6:	4a5f      	ldr	r2, [pc, #380]	@ (8002324 <HAL_GPIO_Init+0x30c>)
 80021a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002324 <HAL_GPIO_Init+0x30c>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002328 <HAL_GPIO_Init+0x310>)
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	3302      	adds	r3, #2
 80021c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	220f      	movs	r2, #15
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a52      	ldr	r2, [pc, #328]	@ (800232c <HAL_GPIO_Init+0x314>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d02b      	beq.n	800223e <HAL_GPIO_Init+0x226>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a51      	ldr	r2, [pc, #324]	@ (8002330 <HAL_GPIO_Init+0x318>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d025      	beq.n	800223a <HAL_GPIO_Init+0x222>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a50      	ldr	r2, [pc, #320]	@ (8002334 <HAL_GPIO_Init+0x31c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d01f      	beq.n	8002236 <HAL_GPIO_Init+0x21e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002338 <HAL_GPIO_Init+0x320>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d019      	beq.n	8002232 <HAL_GPIO_Init+0x21a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4e      	ldr	r2, [pc, #312]	@ (800233c <HAL_GPIO_Init+0x324>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d013      	beq.n	800222e <HAL_GPIO_Init+0x216>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4d      	ldr	r2, [pc, #308]	@ (8002340 <HAL_GPIO_Init+0x328>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00d      	beq.n	800222a <HAL_GPIO_Init+0x212>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4c      	ldr	r2, [pc, #304]	@ (8002344 <HAL_GPIO_Init+0x32c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d007      	beq.n	8002226 <HAL_GPIO_Init+0x20e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4b      	ldr	r2, [pc, #300]	@ (8002348 <HAL_GPIO_Init+0x330>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d101      	bne.n	8002222 <HAL_GPIO_Init+0x20a>
 800221e:	2307      	movs	r3, #7
 8002220:	e00e      	b.n	8002240 <HAL_GPIO_Init+0x228>
 8002222:	2308      	movs	r3, #8
 8002224:	e00c      	b.n	8002240 <HAL_GPIO_Init+0x228>
 8002226:	2306      	movs	r3, #6
 8002228:	e00a      	b.n	8002240 <HAL_GPIO_Init+0x228>
 800222a:	2305      	movs	r3, #5
 800222c:	e008      	b.n	8002240 <HAL_GPIO_Init+0x228>
 800222e:	2304      	movs	r3, #4
 8002230:	e006      	b.n	8002240 <HAL_GPIO_Init+0x228>
 8002232:	2303      	movs	r3, #3
 8002234:	e004      	b.n	8002240 <HAL_GPIO_Init+0x228>
 8002236:	2302      	movs	r3, #2
 8002238:	e002      	b.n	8002240 <HAL_GPIO_Init+0x228>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_GPIO_Init+0x228>
 800223e:	2300      	movs	r3, #0
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	f002 0203 	and.w	r2, r2, #3
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	4093      	lsls	r3, r2
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002250:	4935      	ldr	r1, [pc, #212]	@ (8002328 <HAL_GPIO_Init+0x310>)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800225e:	4b3b      	ldr	r3, [pc, #236]	@ (800234c <HAL_GPIO_Init+0x334>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002282:	4a32      	ldr	r2, [pc, #200]	@ (800234c <HAL_GPIO_Init+0x334>)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002288:	4b30      	ldr	r3, [pc, #192]	@ (800234c <HAL_GPIO_Init+0x334>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022ac:	4a27      	ldr	r2, [pc, #156]	@ (800234c <HAL_GPIO_Init+0x334>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022b2:	4b26      	ldr	r3, [pc, #152]	@ (800234c <HAL_GPIO_Init+0x334>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022d6:	4a1d      	ldr	r2, [pc, #116]	@ (800234c <HAL_GPIO_Init+0x334>)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022dc:	4b1b      	ldr	r3, [pc, #108]	@ (800234c <HAL_GPIO_Init+0x334>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002300:	4a12      	ldr	r2, [pc, #72]	@ (800234c <HAL_GPIO_Init+0x334>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3301      	adds	r3, #1
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	2b0f      	cmp	r3, #15
 8002310:	f67f ae90 	bls.w	8002034 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3724      	adds	r7, #36	@ 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	40013800 	.word	0x40013800
 800232c:	40020000 	.word	0x40020000
 8002330:	40020400 	.word	0x40020400
 8002334:	40020800 	.word	0x40020800
 8002338:	40020c00 	.word	0x40020c00
 800233c:	40021000 	.word	0x40021000
 8002340:	40021400 	.word	0x40021400
 8002344:	40021800 	.word	0x40021800
 8002348:	40021c00 	.word	0x40021c00
 800234c:	40013c00 	.word	0x40013c00

08002350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	807b      	strh	r3, [r7, #2]
 800235c:	4613      	mov	r3, r2
 800235e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002360:	787b      	ldrb	r3, [r7, #1]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800236c:	e003      	b.n	8002376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800236e:	887b      	ldrh	r3, [r7, #2]
 8002370:	041a      	lsls	r2, r3, #16
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	619a      	str	r2, [r3, #24]
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e267      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d075      	beq.n	800248e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023a2:	4b88      	ldr	r3, [pc, #544]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d00c      	beq.n	80023c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ae:	4b85      	ldr	r3, [pc, #532]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d112      	bne.n	80023e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ba:	4b82      	ldr	r3, [pc, #520]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023c6:	d10b      	bne.n	80023e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c8:	4b7e      	ldr	r3, [pc, #504]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d05b      	beq.n	800248c <HAL_RCC_OscConfig+0x108>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d157      	bne.n	800248c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e242      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023e8:	d106      	bne.n	80023f8 <HAL_RCC_OscConfig+0x74>
 80023ea:	4b76      	ldr	r3, [pc, #472]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a75      	ldr	r2, [pc, #468]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e01d      	b.n	8002434 <HAL_RCC_OscConfig+0xb0>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002400:	d10c      	bne.n	800241c <HAL_RCC_OscConfig+0x98>
 8002402:	4b70      	ldr	r3, [pc, #448]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6f      	ldr	r2, [pc, #444]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	4b6d      	ldr	r3, [pc, #436]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a6c      	ldr	r2, [pc, #432]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e00b      	b.n	8002434 <HAL_RCC_OscConfig+0xb0>
 800241c:	4b69      	ldr	r3, [pc, #420]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a68      	ldr	r2, [pc, #416]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4b66      	ldr	r3, [pc, #408]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a65      	ldr	r2, [pc, #404]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 800242e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d013      	beq.n	8002464 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7ff fc18 	bl	8001c70 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002444:	f7ff fc14 	bl	8001c70 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	@ 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e207      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002456:	4b5b      	ldr	r3, [pc, #364]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0xc0>
 8002462:	e014      	b.n	800248e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7ff fc04 	bl	8001c70 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800246c:	f7ff fc00 	bl	8001c70 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b64      	cmp	r3, #100	@ 0x64
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e1f3      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247e:	4b51      	ldr	r3, [pc, #324]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0xe8>
 800248a:	e000      	b.n	800248e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d063      	beq.n	8002562 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800249a:	4b4a      	ldr	r3, [pc, #296]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00b      	beq.n	80024be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024a6:	4b47      	ldr	r3, [pc, #284]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d11c      	bne.n	80024ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024b2:	4b44      	ldr	r3, [pc, #272]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d116      	bne.n	80024ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024be:	4b41      	ldr	r3, [pc, #260]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <HAL_RCC_OscConfig+0x152>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d001      	beq.n	80024d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e1c7      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d6:	4b3b      	ldr	r3, [pc, #236]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4937      	ldr	r1, [pc, #220]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ea:	e03a      	b.n	8002562 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d020      	beq.n	8002536 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f4:	4b34      	ldr	r3, [pc, #208]	@ (80025c8 <HAL_RCC_OscConfig+0x244>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fa:	f7ff fbb9 	bl	8001c70 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002502:	f7ff fbb5 	bl	8001c70 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e1a8      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002514:	4b2b      	ldr	r3, [pc, #172]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b28      	ldr	r3, [pc, #160]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4925      	ldr	r1, [pc, #148]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002530:	4313      	orrs	r3, r2
 8002532:	600b      	str	r3, [r1, #0]
 8002534:	e015      	b.n	8002562 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002536:	4b24      	ldr	r3, [pc, #144]	@ (80025c8 <HAL_RCC_OscConfig+0x244>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7ff fb98 	bl	8001c70 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002544:	f7ff fb94 	bl	8001c70 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e187      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002556:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d036      	beq.n	80025dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d016      	beq.n	80025a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002576:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <HAL_RCC_OscConfig+0x248>)
 8002578:	2201      	movs	r2, #1
 800257a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257c:	f7ff fb78 	bl	8001c70 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002584:	f7ff fb74 	bl	8001c70 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e167      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002596:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_RCC_OscConfig+0x240>)
 8002598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0x200>
 80025a2:	e01b      	b.n	80025dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a4:	4b09      	ldr	r3, [pc, #36]	@ (80025cc <HAL_RCC_OscConfig+0x248>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025aa:	f7ff fb61 	bl	8001c70 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b0:	e00e      	b.n	80025d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b2:	f7ff fb5d 	bl	8001c70 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d907      	bls.n	80025d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e150      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
 80025c4:	40023800 	.word	0x40023800
 80025c8:	42470000 	.word	0x42470000
 80025cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d0:	4b88      	ldr	r3, [pc, #544]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 80025d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ea      	bne.n	80025b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 8097 	beq.w	8002718 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ee:	4b81      	ldr	r3, [pc, #516]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10f      	bne.n	800261a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	4b7d      	ldr	r3, [pc, #500]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	4a7c      	ldr	r2, [pc, #496]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002608:	6413      	str	r3, [r2, #64]	@ 0x40
 800260a:	4b7a      	ldr	r3, [pc, #488]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002616:	2301      	movs	r3, #1
 8002618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	4b77      	ldr	r3, [pc, #476]	@ (80027f8 <HAL_RCC_OscConfig+0x474>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d118      	bne.n	8002658 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002626:	4b74      	ldr	r3, [pc, #464]	@ (80027f8 <HAL_RCC_OscConfig+0x474>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a73      	ldr	r2, [pc, #460]	@ (80027f8 <HAL_RCC_OscConfig+0x474>)
 800262c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002632:	f7ff fb1d 	bl	8001c70 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263a:	f7ff fb19 	bl	8001c70 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e10c      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	4b6a      	ldr	r3, [pc, #424]	@ (80027f8 <HAL_RCC_OscConfig+0x474>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d106      	bne.n	800266e <HAL_RCC_OscConfig+0x2ea>
 8002660:	4b64      	ldr	r3, [pc, #400]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002664:	4a63      	ldr	r2, [pc, #396]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6713      	str	r3, [r2, #112]	@ 0x70
 800266c:	e01c      	b.n	80026a8 <HAL_RCC_OscConfig+0x324>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b05      	cmp	r3, #5
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0x30c>
 8002676:	4b5f      	ldr	r3, [pc, #380]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800267a:	4a5e      	ldr	r2, [pc, #376]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 800267c:	f043 0304 	orr.w	r3, r3, #4
 8002680:	6713      	str	r3, [r2, #112]	@ 0x70
 8002682:	4b5c      	ldr	r3, [pc, #368]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002686:	4a5b      	ldr	r2, [pc, #364]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6713      	str	r3, [r2, #112]	@ 0x70
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_OscConfig+0x324>
 8002690:	4b58      	ldr	r3, [pc, #352]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002694:	4a57      	ldr	r2, [pc, #348]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	6713      	str	r3, [r2, #112]	@ 0x70
 800269c:	4b55      	ldr	r3, [pc, #340]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a0:	4a54      	ldr	r2, [pc, #336]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 80026a2:	f023 0304 	bic.w	r3, r3, #4
 80026a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d015      	beq.n	80026dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b0:	f7ff fade 	bl	8001c70 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b6:	e00a      	b.n	80026ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b8:	f7ff fada 	bl	8001c70 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e0cb      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ce:	4b49      	ldr	r3, [pc, #292]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0ee      	beq.n	80026b8 <HAL_RCC_OscConfig+0x334>
 80026da:	e014      	b.n	8002706 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026dc:	f7ff fac8 	bl	8001c70 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e4:	f7ff fac4 	bl	8001c70 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e0b5      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fa:	4b3e      	ldr	r3, [pc, #248]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1ee      	bne.n	80026e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d105      	bne.n	8002718 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270c:	4b39      	ldr	r3, [pc, #228]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	4a38      	ldr	r2, [pc, #224]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002712:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002716:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 80a1 	beq.w	8002864 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002722:	4b34      	ldr	r3, [pc, #208]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b08      	cmp	r3, #8
 800272c:	d05c      	beq.n	80027e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d141      	bne.n	80027ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002736:	4b31      	ldr	r3, [pc, #196]	@ (80027fc <HAL_RCC_OscConfig+0x478>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7ff fa98 	bl	8001c70 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002744:	f7ff fa94 	bl	8001c70 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e087      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002756:	4b27      	ldr	r3, [pc, #156]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002770:	019b      	lsls	r3, r3, #6
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002778:	085b      	lsrs	r3, r3, #1
 800277a:	3b01      	subs	r3, #1
 800277c:	041b      	lsls	r3, r3, #16
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002784:	061b      	lsls	r3, r3, #24
 8002786:	491b      	ldr	r1, [pc, #108]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800278c:	4b1b      	ldr	r3, [pc, #108]	@ (80027fc <HAL_RCC_OscConfig+0x478>)
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002792:	f7ff fa6d 	bl	8001c70 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279a:	f7ff fa69 	bl	8001c70 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e05c      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ac:	4b11      	ldr	r3, [pc, #68]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x416>
 80027b8:	e054      	b.n	8002864 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ba:	4b10      	ldr	r3, [pc, #64]	@ (80027fc <HAL_RCC_OscConfig+0x478>)
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7ff fa56 	bl	8001c70 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c8:	f7ff fa52 	bl	8001c70 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e045      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027da:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_RCC_OscConfig+0x470>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x444>
 80027e6:	e03d      	b.n	8002864 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e038      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40007000 	.word	0x40007000
 80027fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002800:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <HAL_RCC_OscConfig+0x4ec>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d028      	beq.n	8002860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002818:	429a      	cmp	r2, r3
 800281a:	d121      	bne.n	8002860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d11a      	bne.n	8002860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002830:	4013      	ands	r3, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002836:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002838:	4293      	cmp	r3, r2
 800283a:	d111      	bne.n	8002860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002846:	085b      	lsrs	r3, r3, #1
 8002848:	3b01      	subs	r3, #1
 800284a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800284c:	429a      	cmp	r2, r3
 800284e:	d107      	bne.n	8002860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800

08002874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0cc      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002888:	4b68      	ldr	r3, [pc, #416]	@ (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d90c      	bls.n	80028b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b65      	ldr	r3, [pc, #404]	@ (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	4b63      	ldr	r3, [pc, #396]	@ (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0b8      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d020      	beq.n	80028fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c8:	4b59      	ldr	r3, [pc, #356]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4a58      	ldr	r2, [pc, #352]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028e0:	4b53      	ldr	r3, [pc, #332]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4a52      	ldr	r2, [pc, #328]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ec:	4b50      	ldr	r3, [pc, #320]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	494d      	ldr	r1, [pc, #308]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d044      	beq.n	8002994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d107      	bne.n	8002922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	4b47      	ldr	r3, [pc, #284]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d119      	bne.n	8002952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e07f      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d003      	beq.n	8002932 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800292e:	2b03      	cmp	r3, #3
 8002930:	d107      	bne.n	8002942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002932:	4b3f      	ldr	r3, [pc, #252]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e06f      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002942:	4b3b      	ldr	r3, [pc, #236]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e067      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002952:	4b37      	ldr	r3, [pc, #220]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f023 0203 	bic.w	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4934      	ldr	r1, [pc, #208]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	4313      	orrs	r3, r2
 8002962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002964:	f7ff f984 	bl	8001c70 <HAL_GetTick>
 8002968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296a:	e00a      	b.n	8002982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800296c:	f7ff f980 	bl	8001c70 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e04f      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002982:	4b2b      	ldr	r3, [pc, #172]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 020c 	and.w	r2, r3, #12
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	429a      	cmp	r2, r3
 8002992:	d1eb      	bne.n	800296c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002994:	4b25      	ldr	r3, [pc, #148]	@ (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d20c      	bcs.n	80029bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b22      	ldr	r3, [pc, #136]	@ (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b20      	ldr	r3, [pc, #128]	@ (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e032      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c8:	4b19      	ldr	r3, [pc, #100]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4916      	ldr	r1, [pc, #88]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d009      	beq.n	80029fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029e6:	4b12      	ldr	r3, [pc, #72]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	490e      	ldr	r1, [pc, #56]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029fa:	f000 f821 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 80029fe:	4602      	mov	r2, r0
 8002a00:	4b0b      	ldr	r3, [pc, #44]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	490a      	ldr	r1, [pc, #40]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	5ccb      	ldrb	r3, [r1, r3]
 8002a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a12:	4a09      	ldr	r2, [pc, #36]	@ (8002a38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a16:	4b09      	ldr	r3, [pc, #36]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff f8e4 	bl	8001be8 <HAL_InitTick>

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023c00 	.word	0x40023c00
 8002a30:	40023800 	.word	0x40023800
 8002a34:	08004cc4 	.word	0x08004cc4
 8002a38:	20000010 	.word	0x20000010
 8002a3c:	20000014 	.word	0x20000014

08002a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a44:	b090      	sub	sp, #64	@ 0x40
 8002a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a58:	4b59      	ldr	r3, [pc, #356]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d00d      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0x40>
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	f200 80a1 	bhi.w	8002bac <HAL_RCC_GetSysClockFreq+0x16c>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x34>
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a72:	e09b      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a74:	4b53      	ldr	r3, [pc, #332]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a78:	e09b      	b.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a7a:	4b53      	ldr	r3, [pc, #332]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a7e:	e098      	b.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a80:	4b4f      	ldr	r3, [pc, #316]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a88:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a8a:	4b4d      	ldr	r3, [pc, #308]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d028      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a96:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	099b      	lsrs	r3, r3, #6
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	623b      	str	r3, [r7, #32]
 8002aa0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4b47      	ldr	r3, [pc, #284]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002aac:	fb03 f201 	mul.w	r2, r3, r1
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	fb00 f303 	mul.w	r3, r0, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	4a43      	ldr	r2, [pc, #268]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002aba:	fba0 1202 	umull	r1, r2, r0, r2
 8002abe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ac0:	460a      	mov	r2, r1
 8002ac2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ac4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ac6:	4413      	add	r3, r2
 8002ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002acc:	2200      	movs	r2, #0
 8002ace:	61bb      	str	r3, [r7, #24]
 8002ad0:	61fa      	str	r2, [r7, #28]
 8002ad2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ad6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002ada:	f7fd ffb3 	bl	8000a44 <__aeabi_uldivmod>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ae6:	e053      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae8:	4b35      	ldr	r3, [pc, #212]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	099b      	lsrs	r3, r3, #6
 8002aee:	2200      	movs	r2, #0
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	617a      	str	r2, [r7, #20]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002afa:	f04f 0b00 	mov.w	fp, #0
 8002afe:	4652      	mov	r2, sl
 8002b00:	465b      	mov	r3, fp
 8002b02:	f04f 0000 	mov.w	r0, #0
 8002b06:	f04f 0100 	mov.w	r1, #0
 8002b0a:	0159      	lsls	r1, r3, #5
 8002b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b10:	0150      	lsls	r0, r2, #5
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	ebb2 080a 	subs.w	r8, r2, sl
 8002b1a:	eb63 090b 	sbc.w	r9, r3, fp
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b32:	ebb2 0408 	subs.w	r4, r2, r8
 8002b36:	eb63 0509 	sbc.w	r5, r3, r9
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	00eb      	lsls	r3, r5, #3
 8002b44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b48:	00e2      	lsls	r2, r4, #3
 8002b4a:	4614      	mov	r4, r2
 8002b4c:	461d      	mov	r5, r3
 8002b4e:	eb14 030a 	adds.w	r3, r4, sl
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	eb45 030b 	adc.w	r3, r5, fp
 8002b58:	607b      	str	r3, [r7, #4]
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b66:	4629      	mov	r1, r5
 8002b68:	028b      	lsls	r3, r1, #10
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b70:	4621      	mov	r1, r4
 8002b72:	028a      	lsls	r2, r1, #10
 8002b74:	4610      	mov	r0, r2
 8002b76:	4619      	mov	r1, r3
 8002b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	60fa      	str	r2, [r7, #12]
 8002b80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b84:	f7fd ff5e 	bl	8000a44 <__aeabi_uldivmod>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b90:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002ba0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002baa:	e002      	b.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bac:	4b05      	ldr	r3, [pc, #20]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3740      	adds	r7, #64	@ 0x40
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	00f42400 	.word	0x00f42400
 8002bc8:	017d7840 	.word	0x017d7840

08002bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd0:	4b03      	ldr	r3, [pc, #12]	@ (8002be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	20000010 	.word	0x20000010

08002be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002be8:	f7ff fff0 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4b05      	ldr	r3, [pc, #20]	@ (8002c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	0a9b      	lsrs	r3, r3, #10
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	4903      	ldr	r1, [pc, #12]	@ (8002c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bfa:	5ccb      	ldrb	r3, [r1, r3]
 8002bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40023800 	.word	0x40023800
 8002c08:	08004cd4 	.word	0x08004cd4

08002c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c10:	f7ff ffdc 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b05      	ldr	r3, [pc, #20]	@ (8002c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	0b5b      	lsrs	r3, r3, #13
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	4903      	ldr	r1, [pc, #12]	@ (8002c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c22:	5ccb      	ldrb	r3, [r1, r3]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	08004cd4 	.word	0x08004cd4

08002c34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e07b      	b.n	8002d3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d108      	bne.n	8002c60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c56:	d009      	beq.n	8002c6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	61da      	str	r2, [r3, #28]
 8002c5e:	e005      	b.n	8002c6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fe fd68 	bl	800175c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ca2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cf0:	ea42 0103 	orr.w	r1, r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	0c1b      	lsrs	r3, r3, #16
 8002d0a:	f003 0104 	and.w	r1, r3, #4
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d12:	f003 0210 	and.w	r2, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69da      	ldr	r2, [r3, #28]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b088      	sub	sp, #32
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	603b      	str	r3, [r7, #0]
 8002d52:	4613      	mov	r3, r2
 8002d54:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d56:	f7fe ff8b 	bl	8001c70 <HAL_GetTick>
 8002d5a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d001      	beq.n	8002d70 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e12a      	b.n	8002fc6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_SPI_Transmit+0x36>
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e122      	b.n	8002fc6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_SPI_Transmit+0x48>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e11b      	b.n	8002fc6 <HAL_SPI_Transmit+0x280>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2203      	movs	r2, #3
 8002d9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	88fa      	ldrh	r2, [r7, #6]
 8002dae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	88fa      	ldrh	r2, [r7, #6]
 8002db4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ddc:	d10f      	bne.n	8002dfe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e08:	2b40      	cmp	r3, #64	@ 0x40
 8002e0a:	d007      	beq.n	8002e1c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e24:	d152      	bne.n	8002ecc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Transmit+0xee>
 8002e2e:	8b7b      	ldrh	r3, [r7, #26]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d145      	bne.n	8002ec0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e38:	881a      	ldrh	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e44:	1c9a      	adds	r2, r3, #2
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e58:	e032      	b.n	8002ec0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d112      	bne.n	8002e8e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6c:	881a      	ldrh	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e78:	1c9a      	adds	r2, r3, #2
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e8c:	e018      	b.n	8002ec0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e8e:	f7fe feef 	bl	8001c70 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d803      	bhi.n	8002ea6 <HAL_SPI_Transmit+0x160>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d102      	bne.n	8002eac <HAL_SPI_Transmit+0x166>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e082      	b.n	8002fc6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1c7      	bne.n	8002e5a <HAL_SPI_Transmit+0x114>
 8002eca:	e053      	b.n	8002f74 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <HAL_SPI_Transmit+0x194>
 8002ed4:	8b7b      	ldrh	r3, [r7, #26]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d147      	bne.n	8002f6a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	330c      	adds	r3, #12
 8002ee4:	7812      	ldrb	r2, [r2, #0]
 8002ee6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f00:	e033      	b.n	8002f6a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d113      	bne.n	8002f38 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	330c      	adds	r3, #12
 8002f1a:	7812      	ldrb	r2, [r2, #0]
 8002f1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002f36:	e018      	b.n	8002f6a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f38:	f7fe fe9a 	bl	8001c70 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d803      	bhi.n	8002f50 <HAL_SPI_Transmit+0x20a>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d102      	bne.n	8002f56 <HAL_SPI_Transmit+0x210>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e02d      	b.n	8002fc6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1c6      	bne.n	8002f02 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f74:	69fa      	ldr	r2, [r7, #28]
 8002f76:	6839      	ldr	r1, [r7, #0]
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 fa59 	bl	8003430 <SPI_EndRxTxTransaction>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
  }
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3720      	adds	r7, #32
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b08a      	sub	sp, #40	@ 0x28
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fe0:	f7fe fe46 	bl	8001c70 <HAL_GetTick>
 8002fe4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fec:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002ff4:	887b      	ldrh	r3, [r7, #2]
 8002ff6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ff8:	7ffb      	ldrb	r3, [r7, #31]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d00c      	beq.n	8003018 <HAL_SPI_TransmitReceive+0x4a>
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003004:	d106      	bne.n	8003014 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d102      	bne.n	8003014 <HAL_SPI_TransmitReceive+0x46>
 800300e:	7ffb      	ldrb	r3, [r7, #31]
 8003010:	2b04      	cmp	r3, #4
 8003012:	d001      	beq.n	8003018 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003014:	2302      	movs	r3, #2
 8003016:	e17f      	b.n	8003318 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <HAL_SPI_TransmitReceive+0x5c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <HAL_SPI_TransmitReceive+0x5c>
 8003024:	887b      	ldrh	r3, [r7, #2]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e174      	b.n	8003318 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_SPI_TransmitReceive+0x6e>
 8003038:	2302      	movs	r3, #2
 800303a:	e16d      	b.n	8003318 <HAL_SPI_TransmitReceive+0x34a>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b04      	cmp	r3, #4
 800304e:	d003      	beq.n	8003058 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2205      	movs	r2, #5
 8003054:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	887a      	ldrh	r2, [r7, #2]
 800306e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	887a      	ldrh	r2, [r7, #2]
 800307a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	887a      	ldrh	r2, [r7, #2]
 8003080:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003098:	2b40      	cmp	r3, #64	@ 0x40
 800309a:	d007      	beq.n	80030ac <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030b4:	d17e      	bne.n	80031b4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <HAL_SPI_TransmitReceive+0xf6>
 80030be:	8afb      	ldrh	r3, [r7, #22]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d16c      	bne.n	800319e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c8:	881a      	ldrh	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d4:	1c9a      	adds	r2, r3, #2
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030e8:	e059      	b.n	800319e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d11b      	bne.n	8003130 <HAL_SPI_TransmitReceive+0x162>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d016      	beq.n	8003130 <HAL_SPI_TransmitReceive+0x162>
 8003102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003104:	2b01      	cmp	r3, #1
 8003106:	d113      	bne.n	8003130 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310c:	881a      	ldrh	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003118:	1c9a      	adds	r2, r3, #2
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b01      	cmp	r3, #1
 800313c:	d119      	bne.n	8003172 <HAL_SPI_TransmitReceive+0x1a4>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d014      	beq.n	8003172 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003152:	b292      	uxth	r2, r2
 8003154:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800315a:	1c9a      	adds	r2, r3, #2
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800316e:	2301      	movs	r3, #1
 8003170:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003172:	f7fe fd7d 	bl	8001c70 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800317e:	429a      	cmp	r2, r3
 8003180:	d80d      	bhi.n	800319e <HAL_SPI_TransmitReceive+0x1d0>
 8003182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d009      	beq.n	800319e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e0bc      	b.n	8003318 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1a0      	bne.n	80030ea <HAL_SPI_TransmitReceive+0x11c>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d19b      	bne.n	80030ea <HAL_SPI_TransmitReceive+0x11c>
 80031b2:	e082      	b.n	80032ba <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_SPI_TransmitReceive+0x1f4>
 80031bc:	8afb      	ldrh	r3, [r7, #22]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d171      	bne.n	80032a6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	330c      	adds	r3, #12
 80031cc:	7812      	ldrb	r2, [r2, #0]
 80031ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031e8:	e05d      	b.n	80032a6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d11c      	bne.n	8003232 <HAL_SPI_TransmitReceive+0x264>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d017      	beq.n	8003232 <HAL_SPI_TransmitReceive+0x264>
 8003202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003204:	2b01      	cmp	r3, #1
 8003206:	d114      	bne.n	8003232 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	330c      	adds	r3, #12
 8003212:	7812      	ldrb	r2, [r2, #0]
 8003214:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b01      	cmp	r3, #1
 800323e:	d119      	bne.n	8003274 <HAL_SPI_TransmitReceive+0x2a6>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d014      	beq.n	8003274 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003270:	2301      	movs	r3, #1
 8003272:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003274:	f7fe fcfc 	bl	8001c70 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003280:	429a      	cmp	r2, r3
 8003282:	d803      	bhi.n	800328c <HAL_SPI_TransmitReceive+0x2be>
 8003284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328a:	d102      	bne.n	8003292 <HAL_SPI_TransmitReceive+0x2c4>
 800328c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e038      	b.n	8003318 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d19c      	bne.n	80031ea <HAL_SPI_TransmitReceive+0x21c>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d197      	bne.n	80031ea <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032ba:	6a3a      	ldr	r2, [r7, #32]
 80032bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f8b6 	bl	8003430 <SPI_EndRxTxTransaction>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e01d      	b.n	8003318 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032e4:	2300      	movs	r3, #0
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003316:	2300      	movs	r3, #0
  }
}
 8003318:	4618      	mov	r0, r3
 800331a:	3728      	adds	r7, #40	@ 0x28
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	4613      	mov	r3, r2
 800332e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003330:	f7fe fc9e 	bl	8001c70 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	4413      	add	r3, r2
 800333e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003340:	f7fe fc96 	bl	8001c70 <HAL_GetTick>
 8003344:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003346:	4b39      	ldr	r3, [pc, #228]	@ (800342c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	015b      	lsls	r3, r3, #5
 800334c:	0d1b      	lsrs	r3, r3, #20
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	fb02 f303 	mul.w	r3, r2, r3
 8003354:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003356:	e055      	b.n	8003404 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335e:	d051      	beq.n	8003404 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003360:	f7fe fc86 	bl	8001c70 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	429a      	cmp	r2, r3
 800336e:	d902      	bls.n	8003376 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d13d      	bne.n	80033f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003384:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800338e:	d111      	bne.n	80033b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003398:	d004      	beq.n	80033a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033a2:	d107      	bne.n	80033b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033bc:	d10f      	bne.n	80033de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e018      	b.n	8003424 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d102      	bne.n	80033fe <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	e002      	b.n	8003404 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	3b01      	subs	r3, #1
 8003402:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4013      	ands	r3, r2
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	429a      	cmp	r2, r3
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	429a      	cmp	r2, r3
 8003420:	d19a      	bne.n	8003358 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3720      	adds	r7, #32
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000010 	.word	0x20000010

08003430 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2201      	movs	r2, #1
 8003444:	2102      	movs	r1, #2
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f7ff ff6a 	bl	8003320 <SPI_WaitFlagStateUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003456:	f043 0220 	orr.w	r2, r3, #32
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e032      	b.n	80034c8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003462:	4b1b      	ldr	r3, [pc, #108]	@ (80034d0 <SPI_EndRxTxTransaction+0xa0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1b      	ldr	r2, [pc, #108]	@ (80034d4 <SPI_EndRxTxTransaction+0xa4>)
 8003468:	fba2 2303 	umull	r2, r3, r2, r3
 800346c:	0d5b      	lsrs	r3, r3, #21
 800346e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003480:	d112      	bne.n	80034a8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2200      	movs	r2, #0
 800348a:	2180      	movs	r1, #128	@ 0x80
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f7ff ff47 	bl	8003320 <SPI_WaitFlagStateUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d016      	beq.n	80034c6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349c:	f043 0220 	orr.w	r2, r3, #32
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e00f      	b.n	80034c8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034be:	2b80      	cmp	r3, #128	@ 0x80
 80034c0:	d0f2      	beq.n	80034a8 <SPI_EndRxTxTransaction+0x78>
 80034c2:	e000      	b.n	80034c6 <SPI_EndRxTxTransaction+0x96>
        break;
 80034c4:	bf00      	nop
  }

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20000010 	.word	0x20000010
 80034d4:	165e9f81 	.word	0x165e9f81

080034d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e042      	b.n	8003570 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fe fad6 	bl	8001ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2224      	movs	r2, #36	@ 0x24
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800351a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fc99 	bl	8003e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003530:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003540:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003550:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b0ba      	sub	sp, #232	@ 0xe8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800359e:	2300      	movs	r3, #0
 80035a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80035b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10f      	bne.n	80035de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HAL_UART_IRQHandler+0x66>
 80035ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fb7e 	bl	8003cd8 <UART_Receive_IT>
      return;
 80035dc:	e273      	b.n	8003ac6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 80de 	beq.w	80037a4 <HAL_UART_IRQHandler+0x22c>
 80035e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d106      	bne.n	8003602 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80d1 	beq.w	80037a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00b      	beq.n	8003626 <HAL_UART_IRQHandler+0xae>
 800360e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	f043 0201 	orr.w	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HAL_UART_IRQHandler+0xd2>
 8003632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	f043 0202 	orr.w	r2, r3, #2
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800364a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <HAL_UART_IRQHandler+0xf6>
 8003656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	f043 0204 	orr.w	r2, r3, #4
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800366e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d011      	beq.n	800369e <HAL_UART_IRQHandler+0x126>
 800367a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d105      	bne.n	8003692 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003696:	f043 0208 	orr.w	r2, r3, #8
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 820a 	beq.w	8003abc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_UART_IRQHandler+0x14e>
 80036b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 fb09 	bl	8003cd8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d0:	2b40      	cmp	r3, #64	@ 0x40
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <HAL_UART_IRQHandler+0x17a>
 80036ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d04f      	beq.n	8003792 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fa14 	bl	8003b20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003702:	2b40      	cmp	r3, #64	@ 0x40
 8003704:	d141      	bne.n	800378a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3314      	adds	r3, #20
 800370c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800371c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003724:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3314      	adds	r3, #20
 800372e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003732:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003736:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800373e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003742:	e841 2300 	strex	r3, r2, [r1]
 8003746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800374a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1d9      	bne.n	8003706 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d013      	beq.n	8003782 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800375e:	4a8a      	ldr	r2, [pc, #552]	@ (8003988 <HAL_UART_IRQHandler+0x410>)
 8003760:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003766:	4618      	mov	r0, r3
 8003768:	f7fe fc33 	bl	8001fd2 <HAL_DMA_Abort_IT>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800377c:	4610      	mov	r0, r2
 800377e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003780:	e00e      	b.n	80037a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f9b6 	bl	8003af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003788:	e00a      	b.n	80037a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f9b2 	bl	8003af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003790:	e006      	b.n	80037a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f9ae 	bl	8003af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800379e:	e18d      	b.n	8003abc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a0:	bf00      	nop
    return;
 80037a2:	e18b      	b.n	8003abc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	f040 8167 	bne.w	8003a7c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8160 	beq.w	8003a7c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80037bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8159 	beq.w	8003a7c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037ca:	2300      	movs	r3, #0
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ea:	2b40      	cmp	r3, #64	@ 0x40
 80037ec:	f040 80ce 	bne.w	800398c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80a9 	beq.w	8003958 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800380a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800380e:	429a      	cmp	r2, r3
 8003810:	f080 80a2 	bcs.w	8003958 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800381a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003826:	f000 8088 	beq.w	800393a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003838:	e853 3f00 	ldrex	r3, [r3]
 800383c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003840:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003848:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	330c      	adds	r3, #12
 8003852:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003856:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800385a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003862:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003866:	e841 2300 	strex	r3, r2, [r1]
 800386a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800386e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1d9      	bne.n	800382a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3314      	adds	r3, #20
 800387c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003886:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003888:	f023 0301 	bic.w	r3, r3, #1
 800388c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3314      	adds	r3, #20
 8003896:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800389a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800389e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80038a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80038ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1e1      	bne.n	8003876 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3314      	adds	r3, #20
 80038b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038bc:	e853 3f00 	ldrex	r3, [r3]
 80038c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80038c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3314      	adds	r3, #20
 80038d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80038d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80038dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80038e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1e3      	bne.n	80038b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	330c      	adds	r3, #12
 80038fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003902:	e853 3f00 	ldrex	r3, [r3]
 8003906:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003908:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800390a:	f023 0310 	bic.w	r3, r3, #16
 800390e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	330c      	adds	r3, #12
 8003918:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800391c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800391e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003920:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003922:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003924:	e841 2300 	strex	r3, r2, [r1]
 8003928:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800392a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1e3      	bne.n	80038f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe fadc 	bl	8001ef2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2202      	movs	r2, #2
 800393e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003948:	b29b      	uxth	r3, r3
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	b29b      	uxth	r3, r3
 800394e:	4619      	mov	r1, r3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f8d9 	bl	8003b08 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003956:	e0b3      	b.n	8003ac0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800395c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003960:	429a      	cmp	r2, r3
 8003962:	f040 80ad 	bne.w	8003ac0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003970:	f040 80a6 	bne.w	8003ac0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800397e:	4619      	mov	r1, r3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f8c1 	bl	8003b08 <HAL_UARTEx_RxEventCallback>
      return;
 8003986:	e09b      	b.n	8003ac0 <HAL_UART_IRQHandler+0x548>
 8003988:	08003be7 	.word	0x08003be7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003994:	b29b      	uxth	r3, r3
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 808e 	beq.w	8003ac4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80039a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8089 	beq.w	8003ac4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	330c      	adds	r3, #12
 80039b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039bc:	e853 3f00 	ldrex	r3, [r3]
 80039c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	330c      	adds	r3, #12
 80039d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80039d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80039d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e3      	bne.n	80039b2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3314      	adds	r3, #20
 80039f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	623b      	str	r3, [r7, #32]
   return(result);
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3314      	adds	r3, #20
 8003a0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e3      	bne.n	80039ea <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0310 	bic.w	r3, r3, #16
 8003a46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	330c      	adds	r3, #12
 8003a50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003a54:	61fa      	str	r2, [r7, #28]
 8003a56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a58:	69b9      	ldr	r1, [r7, #24]
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	e841 2300 	strex	r3, r2, [r1]
 8003a60:	617b      	str	r3, [r7, #20]
   return(result);
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e3      	bne.n	8003a30 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a72:	4619      	mov	r1, r3
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f847 	bl	8003b08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a7a:	e023      	b.n	8003ac4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d009      	beq.n	8003a9c <HAL_UART_IRQHandler+0x524>
 8003a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f8b7 	bl	8003c08 <UART_Transmit_IT>
    return;
 8003a9a:	e014      	b.n	8003ac6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00e      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x54e>
 8003aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f8f7 	bl	8003ca8 <UART_EndTransmit_IT>
    return;
 8003aba:	e004      	b.n	8003ac6 <HAL_UART_IRQHandler+0x54e>
    return;
 8003abc:	bf00      	nop
 8003abe:	e002      	b.n	8003ac6 <HAL_UART_IRQHandler+0x54e>
      return;
 8003ac0:	bf00      	nop
 8003ac2:	e000      	b.n	8003ac6 <HAL_UART_IRQHandler+0x54e>
      return;
 8003ac4:	bf00      	nop
  }
}
 8003ac6:	37e8      	adds	r7, #232	@ 0xe8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b095      	sub	sp, #84	@ 0x54
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b48:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e5      	bne.n	8003b28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3314      	adds	r3, #20
 8003b62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	e853 3f00 	ldrex	r3, [r3]
 8003b6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f023 0301 	bic.w	r3, r3, #1
 8003b72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3314      	adds	r3, #20
 8003b7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b84:	e841 2300 	strex	r3, r2, [r1]
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e5      	bne.n	8003b5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d119      	bne.n	8003bcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f023 0310 	bic.w	r3, r3, #16
 8003bae:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bb8:	61ba      	str	r2, [r7, #24]
 8003bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbc:	6979      	ldr	r1, [r7, #20]
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	e841 2300 	strex	r3, r2, [r1]
 8003bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e5      	bne.n	8003b98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003bda:	bf00      	nop
 8003bdc:	3754      	adds	r7, #84	@ 0x54
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b084      	sub	sp, #16
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f7ff ff7a 	bl	8003af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b21      	cmp	r3, #33	@ 0x21
 8003c1a:	d13e      	bne.n	8003c9a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c24:	d114      	bne.n	8003c50 <UART_Transmit_IT+0x48>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d110      	bne.n	8003c50 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c42:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	1c9a      	adds	r2, r3, #2
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	621a      	str	r2, [r3, #32]
 8003c4e:	e008      	b.n	8003c62 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	1c59      	adds	r1, r3, #1
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6211      	str	r1, [r2, #32]
 8003c5a:	781a      	ldrb	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	4619      	mov	r1, r3
 8003c70:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10f      	bne.n	8003c96 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e000      	b.n	8003c9c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c9a:	2302      	movs	r3, #2
  }
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cbe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff feff 	bl	8003acc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08c      	sub	sp, #48	@ 0x30
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b22      	cmp	r3, #34	@ 0x22
 8003cf2:	f040 80aa 	bne.w	8003e4a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cfe:	d115      	bne.n	8003d2c <UART_Receive_IT+0x54>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d111      	bne.n	8003d2c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d24:	1c9a      	adds	r2, r3, #2
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d2a:	e024      	b.n	8003d76 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d3a:	d007      	beq.n	8003d4c <UART_Receive_IT+0x74>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10a      	bne.n	8003d5a <UART_Receive_IT+0x82>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d56:	701a      	strb	r2, [r3, #0]
 8003d58:	e008      	b.n	8003d6c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	4619      	mov	r1, r3
 8003d84:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d15d      	bne.n	8003e46 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0220 	bic.w	r2, r2, #32
 8003d98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003da8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0201 	bic.w	r2, r2, #1
 8003db8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d135      	bne.n	8003e3c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	330c      	adds	r3, #12
 8003ddc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	e853 3f00 	ldrex	r3, [r3]
 8003de4:	613b      	str	r3, [r7, #16]
   return(result);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f023 0310 	bic.w	r3, r3, #16
 8003dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df6:	623a      	str	r2, [r7, #32]
 8003df8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfa:	69f9      	ldr	r1, [r7, #28]
 8003dfc:	6a3a      	ldr	r2, [r7, #32]
 8003dfe:	e841 2300 	strex	r3, r2, [r1]
 8003e02:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1e5      	bne.n	8003dd6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d10a      	bne.n	8003e2e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e32:	4619      	mov	r1, r3
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff fe67 	bl	8003b08 <HAL_UARTEx_RxEventCallback>
 8003e3a:	e002      	b.n	8003e42 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff fe4f 	bl	8003ae0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	e002      	b.n	8003e4c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	e000      	b.n	8003e4c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e4a:	2302      	movs	r3, #2
  }
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3730      	adds	r7, #48	@ 0x30
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e58:	b0c0      	sub	sp, #256	@ 0x100
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e70:	68d9      	ldr	r1, [r3, #12]
 8003e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	ea40 0301 	orr.w	r3, r0, r1
 8003e7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003eac:	f021 010c 	bic.w	r1, r1, #12
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ece:	6999      	ldr	r1, [r3, #24]
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	ea40 0301 	orr.w	r3, r0, r1
 8003eda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4b8f      	ldr	r3, [pc, #572]	@ (8004120 <UART_SetConfig+0x2cc>)
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d005      	beq.n	8003ef4 <UART_SetConfig+0xa0>
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	4b8d      	ldr	r3, [pc, #564]	@ (8004124 <UART_SetConfig+0x2d0>)
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d104      	bne.n	8003efe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ef4:	f7fe fe8a 	bl	8002c0c <HAL_RCC_GetPCLK2Freq>
 8003ef8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003efc:	e003      	b.n	8003f06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003efe:	f7fe fe71 	bl	8002be4 <HAL_RCC_GetPCLK1Freq>
 8003f02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f10:	f040 810c 	bne.w	800412c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f26:	4622      	mov	r2, r4
 8003f28:	462b      	mov	r3, r5
 8003f2a:	1891      	adds	r1, r2, r2
 8003f2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f2e:	415b      	adcs	r3, r3
 8003f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f36:	4621      	mov	r1, r4
 8003f38:	eb12 0801 	adds.w	r8, r2, r1
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	eb43 0901 	adc.w	r9, r3, r1
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f56:	4690      	mov	r8, r2
 8003f58:	4699      	mov	r9, r3
 8003f5a:	4623      	mov	r3, r4
 8003f5c:	eb18 0303 	adds.w	r3, r8, r3
 8003f60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f64:	462b      	mov	r3, r5
 8003f66:	eb49 0303 	adc.w	r3, r9, r3
 8003f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f82:	460b      	mov	r3, r1
 8003f84:	18db      	adds	r3, r3, r3
 8003f86:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f88:	4613      	mov	r3, r2
 8003f8a:	eb42 0303 	adc.w	r3, r2, r3
 8003f8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f98:	f7fc fd54 	bl	8000a44 <__aeabi_uldivmod>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4b61      	ldr	r3, [pc, #388]	@ (8004128 <UART_SetConfig+0x2d4>)
 8003fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	011c      	lsls	r4, r3, #4
 8003faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fb4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003fb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	1891      	adds	r1, r2, r2
 8003fc2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003fc4:	415b      	adcs	r3, r3
 8003fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003fcc:	4641      	mov	r1, r8
 8003fce:	eb12 0a01 	adds.w	sl, r2, r1
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	eb43 0b01 	adc.w	fp, r3, r1
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fe4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fec:	4692      	mov	sl, r2
 8003fee:	469b      	mov	fp, r3
 8003ff0:	4643      	mov	r3, r8
 8003ff2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ff6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ffa:	464b      	mov	r3, r9
 8003ffc:	eb4b 0303 	adc.w	r3, fp, r3
 8004000:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004010:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004014:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004018:	460b      	mov	r3, r1
 800401a:	18db      	adds	r3, r3, r3
 800401c:	643b      	str	r3, [r7, #64]	@ 0x40
 800401e:	4613      	mov	r3, r2
 8004020:	eb42 0303 	adc.w	r3, r2, r3
 8004024:	647b      	str	r3, [r7, #68]	@ 0x44
 8004026:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800402a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800402e:	f7fc fd09 	bl	8000a44 <__aeabi_uldivmod>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4611      	mov	r1, r2
 8004038:	4b3b      	ldr	r3, [pc, #236]	@ (8004128 <UART_SetConfig+0x2d4>)
 800403a:	fba3 2301 	umull	r2, r3, r3, r1
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2264      	movs	r2, #100	@ 0x64
 8004042:	fb02 f303 	mul.w	r3, r2, r3
 8004046:	1acb      	subs	r3, r1, r3
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800404e:	4b36      	ldr	r3, [pc, #216]	@ (8004128 <UART_SetConfig+0x2d4>)
 8004050:	fba3 2302 	umull	r2, r3, r3, r2
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800405c:	441c      	add	r4, r3
 800405e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004062:	2200      	movs	r2, #0
 8004064:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004068:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800406c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004070:	4642      	mov	r2, r8
 8004072:	464b      	mov	r3, r9
 8004074:	1891      	adds	r1, r2, r2
 8004076:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004078:	415b      	adcs	r3, r3
 800407a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800407c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004080:	4641      	mov	r1, r8
 8004082:	1851      	adds	r1, r2, r1
 8004084:	6339      	str	r1, [r7, #48]	@ 0x30
 8004086:	4649      	mov	r1, r9
 8004088:	414b      	adcs	r3, r1
 800408a:	637b      	str	r3, [r7, #52]	@ 0x34
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004098:	4659      	mov	r1, fp
 800409a:	00cb      	lsls	r3, r1, #3
 800409c:	4651      	mov	r1, sl
 800409e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040a2:	4651      	mov	r1, sl
 80040a4:	00ca      	lsls	r2, r1, #3
 80040a6:	4610      	mov	r0, r2
 80040a8:	4619      	mov	r1, r3
 80040aa:	4603      	mov	r3, r0
 80040ac:	4642      	mov	r2, r8
 80040ae:	189b      	adds	r3, r3, r2
 80040b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040b4:	464b      	mov	r3, r9
 80040b6:	460a      	mov	r2, r1
 80040b8:	eb42 0303 	adc.w	r3, r2, r3
 80040bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80040d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040d4:	460b      	mov	r3, r1
 80040d6:	18db      	adds	r3, r3, r3
 80040d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040da:	4613      	mov	r3, r2
 80040dc:	eb42 0303 	adc.w	r3, r2, r3
 80040e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80040ea:	f7fc fcab 	bl	8000a44 <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004128 <UART_SetConfig+0x2d4>)
 80040f4:	fba3 1302 	umull	r1, r3, r3, r2
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	2164      	movs	r1, #100	@ 0x64
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	3332      	adds	r3, #50	@ 0x32
 8004106:	4a08      	ldr	r2, [pc, #32]	@ (8004128 <UART_SetConfig+0x2d4>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	f003 0207 	and.w	r2, r3, #7
 8004112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4422      	add	r2, r4
 800411a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800411c:	e106      	b.n	800432c <UART_SetConfig+0x4d8>
 800411e:	bf00      	nop
 8004120:	40011000 	.word	0x40011000
 8004124:	40011400 	.word	0x40011400
 8004128:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800412c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004130:	2200      	movs	r2, #0
 8004132:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004136:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800413a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800413e:	4642      	mov	r2, r8
 8004140:	464b      	mov	r3, r9
 8004142:	1891      	adds	r1, r2, r2
 8004144:	6239      	str	r1, [r7, #32]
 8004146:	415b      	adcs	r3, r3
 8004148:	627b      	str	r3, [r7, #36]	@ 0x24
 800414a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800414e:	4641      	mov	r1, r8
 8004150:	1854      	adds	r4, r2, r1
 8004152:	4649      	mov	r1, r9
 8004154:	eb43 0501 	adc.w	r5, r3, r1
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	00eb      	lsls	r3, r5, #3
 8004162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004166:	00e2      	lsls	r2, r4, #3
 8004168:	4614      	mov	r4, r2
 800416a:	461d      	mov	r5, r3
 800416c:	4643      	mov	r3, r8
 800416e:	18e3      	adds	r3, r4, r3
 8004170:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004174:	464b      	mov	r3, r9
 8004176:	eb45 0303 	adc.w	r3, r5, r3
 800417a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800417e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800418a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800419a:	4629      	mov	r1, r5
 800419c:	008b      	lsls	r3, r1, #2
 800419e:	4621      	mov	r1, r4
 80041a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041a4:	4621      	mov	r1, r4
 80041a6:	008a      	lsls	r2, r1, #2
 80041a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80041ac:	f7fc fc4a 	bl	8000a44 <__aeabi_uldivmod>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4b60      	ldr	r3, [pc, #384]	@ (8004338 <UART_SetConfig+0x4e4>)
 80041b6:	fba3 2302 	umull	r2, r3, r3, r2
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	011c      	lsls	r4, r3, #4
 80041be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80041cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80041d0:	4642      	mov	r2, r8
 80041d2:	464b      	mov	r3, r9
 80041d4:	1891      	adds	r1, r2, r2
 80041d6:	61b9      	str	r1, [r7, #24]
 80041d8:	415b      	adcs	r3, r3
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041e0:	4641      	mov	r1, r8
 80041e2:	1851      	adds	r1, r2, r1
 80041e4:	6139      	str	r1, [r7, #16]
 80041e6:	4649      	mov	r1, r9
 80041e8:	414b      	adcs	r3, r1
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041f8:	4659      	mov	r1, fp
 80041fa:	00cb      	lsls	r3, r1, #3
 80041fc:	4651      	mov	r1, sl
 80041fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004202:	4651      	mov	r1, sl
 8004204:	00ca      	lsls	r2, r1, #3
 8004206:	4610      	mov	r0, r2
 8004208:	4619      	mov	r1, r3
 800420a:	4603      	mov	r3, r0
 800420c:	4642      	mov	r2, r8
 800420e:	189b      	adds	r3, r3, r2
 8004210:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004214:	464b      	mov	r3, r9
 8004216:	460a      	mov	r2, r1
 8004218:	eb42 0303 	adc.w	r3, r2, r3
 800421c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	67bb      	str	r3, [r7, #120]	@ 0x78
 800422a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004238:	4649      	mov	r1, r9
 800423a:	008b      	lsls	r3, r1, #2
 800423c:	4641      	mov	r1, r8
 800423e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004242:	4641      	mov	r1, r8
 8004244:	008a      	lsls	r2, r1, #2
 8004246:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800424a:	f7fc fbfb 	bl	8000a44 <__aeabi_uldivmod>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4611      	mov	r1, r2
 8004254:	4b38      	ldr	r3, [pc, #224]	@ (8004338 <UART_SetConfig+0x4e4>)
 8004256:	fba3 2301 	umull	r2, r3, r3, r1
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	2264      	movs	r2, #100	@ 0x64
 800425e:	fb02 f303 	mul.w	r3, r2, r3
 8004262:	1acb      	subs	r3, r1, r3
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	3332      	adds	r3, #50	@ 0x32
 8004268:	4a33      	ldr	r2, [pc, #204]	@ (8004338 <UART_SetConfig+0x4e4>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004274:	441c      	add	r4, r3
 8004276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800427a:	2200      	movs	r2, #0
 800427c:	673b      	str	r3, [r7, #112]	@ 0x70
 800427e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004280:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004284:	4642      	mov	r2, r8
 8004286:	464b      	mov	r3, r9
 8004288:	1891      	adds	r1, r2, r2
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	415b      	adcs	r3, r3
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004294:	4641      	mov	r1, r8
 8004296:	1851      	adds	r1, r2, r1
 8004298:	6039      	str	r1, [r7, #0]
 800429a:	4649      	mov	r1, r9
 800429c:	414b      	adcs	r3, r1
 800429e:	607b      	str	r3, [r7, #4]
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042ac:	4659      	mov	r1, fp
 80042ae:	00cb      	lsls	r3, r1, #3
 80042b0:	4651      	mov	r1, sl
 80042b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042b6:	4651      	mov	r1, sl
 80042b8:	00ca      	lsls	r2, r1, #3
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	4642      	mov	r2, r8
 80042c2:	189b      	adds	r3, r3, r2
 80042c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042c6:	464b      	mov	r3, r9
 80042c8:	460a      	mov	r2, r1
 80042ca:	eb42 0303 	adc.w	r3, r2, r3
 80042ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80042da:	667a      	str	r2, [r7, #100]	@ 0x64
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80042e8:	4649      	mov	r1, r9
 80042ea:	008b      	lsls	r3, r1, #2
 80042ec:	4641      	mov	r1, r8
 80042ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042f2:	4641      	mov	r1, r8
 80042f4:	008a      	lsls	r2, r1, #2
 80042f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042fa:	f7fc fba3 	bl	8000a44 <__aeabi_uldivmod>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4b0d      	ldr	r3, [pc, #52]	@ (8004338 <UART_SetConfig+0x4e4>)
 8004304:	fba3 1302 	umull	r1, r3, r3, r2
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	2164      	movs	r1, #100	@ 0x64
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	3332      	adds	r3, #50	@ 0x32
 8004316:	4a08      	ldr	r2, [pc, #32]	@ (8004338 <UART_SetConfig+0x4e4>)
 8004318:	fba2 2303 	umull	r2, r3, r2, r3
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	f003 020f 	and.w	r2, r3, #15
 8004322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4422      	add	r2, r4
 800432a:	609a      	str	r2, [r3, #8]
}
 800432c:	bf00      	nop
 800432e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004332:	46bd      	mov	sp, r7
 8004334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004338:	51eb851f 	.word	0x51eb851f

0800433c <std>:
 800433c:	2300      	movs	r3, #0
 800433e:	b510      	push	{r4, lr}
 8004340:	4604      	mov	r4, r0
 8004342:	e9c0 3300 	strd	r3, r3, [r0]
 8004346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800434a:	6083      	str	r3, [r0, #8]
 800434c:	8181      	strh	r1, [r0, #12]
 800434e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004350:	81c2      	strh	r2, [r0, #14]
 8004352:	6183      	str	r3, [r0, #24]
 8004354:	4619      	mov	r1, r3
 8004356:	2208      	movs	r2, #8
 8004358:	305c      	adds	r0, #92	@ 0x5c
 800435a:	f000 f9e7 	bl	800472c <memset>
 800435e:	4b0d      	ldr	r3, [pc, #52]	@ (8004394 <std+0x58>)
 8004360:	6263      	str	r3, [r4, #36]	@ 0x24
 8004362:	4b0d      	ldr	r3, [pc, #52]	@ (8004398 <std+0x5c>)
 8004364:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004366:	4b0d      	ldr	r3, [pc, #52]	@ (800439c <std+0x60>)
 8004368:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800436a:	4b0d      	ldr	r3, [pc, #52]	@ (80043a0 <std+0x64>)
 800436c:	6323      	str	r3, [r4, #48]	@ 0x30
 800436e:	4b0d      	ldr	r3, [pc, #52]	@ (80043a4 <std+0x68>)
 8004370:	6224      	str	r4, [r4, #32]
 8004372:	429c      	cmp	r4, r3
 8004374:	d006      	beq.n	8004384 <std+0x48>
 8004376:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800437a:	4294      	cmp	r4, r2
 800437c:	d002      	beq.n	8004384 <std+0x48>
 800437e:	33d0      	adds	r3, #208	@ 0xd0
 8004380:	429c      	cmp	r4, r3
 8004382:	d105      	bne.n	8004390 <std+0x54>
 8004384:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800438c:	f000 ba46 	b.w	800481c <__retarget_lock_init_recursive>
 8004390:	bd10      	pop	{r4, pc}
 8004392:	bf00      	nop
 8004394:	0800457d 	.word	0x0800457d
 8004398:	0800459f 	.word	0x0800459f
 800439c:	080045d7 	.word	0x080045d7
 80043a0:	080045fb 	.word	0x080045fb
 80043a4:	20000944 	.word	0x20000944

080043a8 <stdio_exit_handler>:
 80043a8:	4a02      	ldr	r2, [pc, #8]	@ (80043b4 <stdio_exit_handler+0xc>)
 80043aa:	4903      	ldr	r1, [pc, #12]	@ (80043b8 <stdio_exit_handler+0x10>)
 80043ac:	4803      	ldr	r0, [pc, #12]	@ (80043bc <stdio_exit_handler+0x14>)
 80043ae:	f000 b869 	b.w	8004484 <_fwalk_sglue>
 80043b2:	bf00      	nop
 80043b4:	2000001c 	.word	0x2000001c
 80043b8:	08004b1d 	.word	0x08004b1d
 80043bc:	2000002c 	.word	0x2000002c

080043c0 <cleanup_stdio>:
 80043c0:	6841      	ldr	r1, [r0, #4]
 80043c2:	4b0c      	ldr	r3, [pc, #48]	@ (80043f4 <cleanup_stdio+0x34>)
 80043c4:	4299      	cmp	r1, r3
 80043c6:	b510      	push	{r4, lr}
 80043c8:	4604      	mov	r4, r0
 80043ca:	d001      	beq.n	80043d0 <cleanup_stdio+0x10>
 80043cc:	f000 fba6 	bl	8004b1c <_fflush_r>
 80043d0:	68a1      	ldr	r1, [r4, #8]
 80043d2:	4b09      	ldr	r3, [pc, #36]	@ (80043f8 <cleanup_stdio+0x38>)
 80043d4:	4299      	cmp	r1, r3
 80043d6:	d002      	beq.n	80043de <cleanup_stdio+0x1e>
 80043d8:	4620      	mov	r0, r4
 80043da:	f000 fb9f 	bl	8004b1c <_fflush_r>
 80043de:	68e1      	ldr	r1, [r4, #12]
 80043e0:	4b06      	ldr	r3, [pc, #24]	@ (80043fc <cleanup_stdio+0x3c>)
 80043e2:	4299      	cmp	r1, r3
 80043e4:	d004      	beq.n	80043f0 <cleanup_stdio+0x30>
 80043e6:	4620      	mov	r0, r4
 80043e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043ec:	f000 bb96 	b.w	8004b1c <_fflush_r>
 80043f0:	bd10      	pop	{r4, pc}
 80043f2:	bf00      	nop
 80043f4:	20000944 	.word	0x20000944
 80043f8:	200009ac 	.word	0x200009ac
 80043fc:	20000a14 	.word	0x20000a14

08004400 <global_stdio_init.part.0>:
 8004400:	b510      	push	{r4, lr}
 8004402:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <global_stdio_init.part.0+0x30>)
 8004404:	4c0b      	ldr	r4, [pc, #44]	@ (8004434 <global_stdio_init.part.0+0x34>)
 8004406:	4a0c      	ldr	r2, [pc, #48]	@ (8004438 <global_stdio_init.part.0+0x38>)
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	4620      	mov	r0, r4
 800440c:	2200      	movs	r2, #0
 800440e:	2104      	movs	r1, #4
 8004410:	f7ff ff94 	bl	800433c <std>
 8004414:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004418:	2201      	movs	r2, #1
 800441a:	2109      	movs	r1, #9
 800441c:	f7ff ff8e 	bl	800433c <std>
 8004420:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004424:	2202      	movs	r2, #2
 8004426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800442a:	2112      	movs	r1, #18
 800442c:	f7ff bf86 	b.w	800433c <std>
 8004430:	20000a7c 	.word	0x20000a7c
 8004434:	20000944 	.word	0x20000944
 8004438:	080043a9 	.word	0x080043a9

0800443c <__sfp_lock_acquire>:
 800443c:	4801      	ldr	r0, [pc, #4]	@ (8004444 <__sfp_lock_acquire+0x8>)
 800443e:	f000 b9ee 	b.w	800481e <__retarget_lock_acquire_recursive>
 8004442:	bf00      	nop
 8004444:	20000a85 	.word	0x20000a85

08004448 <__sfp_lock_release>:
 8004448:	4801      	ldr	r0, [pc, #4]	@ (8004450 <__sfp_lock_release+0x8>)
 800444a:	f000 b9e9 	b.w	8004820 <__retarget_lock_release_recursive>
 800444e:	bf00      	nop
 8004450:	20000a85 	.word	0x20000a85

08004454 <__sinit>:
 8004454:	b510      	push	{r4, lr}
 8004456:	4604      	mov	r4, r0
 8004458:	f7ff fff0 	bl	800443c <__sfp_lock_acquire>
 800445c:	6a23      	ldr	r3, [r4, #32]
 800445e:	b11b      	cbz	r3, 8004468 <__sinit+0x14>
 8004460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004464:	f7ff bff0 	b.w	8004448 <__sfp_lock_release>
 8004468:	4b04      	ldr	r3, [pc, #16]	@ (800447c <__sinit+0x28>)
 800446a:	6223      	str	r3, [r4, #32]
 800446c:	4b04      	ldr	r3, [pc, #16]	@ (8004480 <__sinit+0x2c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f5      	bne.n	8004460 <__sinit+0xc>
 8004474:	f7ff ffc4 	bl	8004400 <global_stdio_init.part.0>
 8004478:	e7f2      	b.n	8004460 <__sinit+0xc>
 800447a:	bf00      	nop
 800447c:	080043c1 	.word	0x080043c1
 8004480:	20000a7c 	.word	0x20000a7c

08004484 <_fwalk_sglue>:
 8004484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004488:	4607      	mov	r7, r0
 800448a:	4688      	mov	r8, r1
 800448c:	4614      	mov	r4, r2
 800448e:	2600      	movs	r6, #0
 8004490:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004494:	f1b9 0901 	subs.w	r9, r9, #1
 8004498:	d505      	bpl.n	80044a6 <_fwalk_sglue+0x22>
 800449a:	6824      	ldr	r4, [r4, #0]
 800449c:	2c00      	cmp	r4, #0
 800449e:	d1f7      	bne.n	8004490 <_fwalk_sglue+0xc>
 80044a0:	4630      	mov	r0, r6
 80044a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044a6:	89ab      	ldrh	r3, [r5, #12]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d907      	bls.n	80044bc <_fwalk_sglue+0x38>
 80044ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044b0:	3301      	adds	r3, #1
 80044b2:	d003      	beq.n	80044bc <_fwalk_sglue+0x38>
 80044b4:	4629      	mov	r1, r5
 80044b6:	4638      	mov	r0, r7
 80044b8:	47c0      	blx	r8
 80044ba:	4306      	orrs	r6, r0
 80044bc:	3568      	adds	r5, #104	@ 0x68
 80044be:	e7e9      	b.n	8004494 <_fwalk_sglue+0x10>

080044c0 <_puts_r>:
 80044c0:	6a03      	ldr	r3, [r0, #32]
 80044c2:	b570      	push	{r4, r5, r6, lr}
 80044c4:	6884      	ldr	r4, [r0, #8]
 80044c6:	4605      	mov	r5, r0
 80044c8:	460e      	mov	r6, r1
 80044ca:	b90b      	cbnz	r3, 80044d0 <_puts_r+0x10>
 80044cc:	f7ff ffc2 	bl	8004454 <__sinit>
 80044d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044d2:	07db      	lsls	r3, r3, #31
 80044d4:	d405      	bmi.n	80044e2 <_puts_r+0x22>
 80044d6:	89a3      	ldrh	r3, [r4, #12]
 80044d8:	0598      	lsls	r0, r3, #22
 80044da:	d402      	bmi.n	80044e2 <_puts_r+0x22>
 80044dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044de:	f000 f99e 	bl	800481e <__retarget_lock_acquire_recursive>
 80044e2:	89a3      	ldrh	r3, [r4, #12]
 80044e4:	0719      	lsls	r1, r3, #28
 80044e6:	d502      	bpl.n	80044ee <_puts_r+0x2e>
 80044e8:	6923      	ldr	r3, [r4, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d135      	bne.n	800455a <_puts_r+0x9a>
 80044ee:	4621      	mov	r1, r4
 80044f0:	4628      	mov	r0, r5
 80044f2:	f000 f8c5 	bl	8004680 <__swsetup_r>
 80044f6:	b380      	cbz	r0, 800455a <_puts_r+0x9a>
 80044f8:	f04f 35ff 	mov.w	r5, #4294967295
 80044fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044fe:	07da      	lsls	r2, r3, #31
 8004500:	d405      	bmi.n	800450e <_puts_r+0x4e>
 8004502:	89a3      	ldrh	r3, [r4, #12]
 8004504:	059b      	lsls	r3, r3, #22
 8004506:	d402      	bmi.n	800450e <_puts_r+0x4e>
 8004508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800450a:	f000 f989 	bl	8004820 <__retarget_lock_release_recursive>
 800450e:	4628      	mov	r0, r5
 8004510:	bd70      	pop	{r4, r5, r6, pc}
 8004512:	2b00      	cmp	r3, #0
 8004514:	da04      	bge.n	8004520 <_puts_r+0x60>
 8004516:	69a2      	ldr	r2, [r4, #24]
 8004518:	429a      	cmp	r2, r3
 800451a:	dc17      	bgt.n	800454c <_puts_r+0x8c>
 800451c:	290a      	cmp	r1, #10
 800451e:	d015      	beq.n	800454c <_puts_r+0x8c>
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	6022      	str	r2, [r4, #0]
 8004526:	7019      	strb	r1, [r3, #0]
 8004528:	68a3      	ldr	r3, [r4, #8]
 800452a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800452e:	3b01      	subs	r3, #1
 8004530:	60a3      	str	r3, [r4, #8]
 8004532:	2900      	cmp	r1, #0
 8004534:	d1ed      	bne.n	8004512 <_puts_r+0x52>
 8004536:	2b00      	cmp	r3, #0
 8004538:	da11      	bge.n	800455e <_puts_r+0x9e>
 800453a:	4622      	mov	r2, r4
 800453c:	210a      	movs	r1, #10
 800453e:	4628      	mov	r0, r5
 8004540:	f000 f85f 	bl	8004602 <__swbuf_r>
 8004544:	3001      	adds	r0, #1
 8004546:	d0d7      	beq.n	80044f8 <_puts_r+0x38>
 8004548:	250a      	movs	r5, #10
 800454a:	e7d7      	b.n	80044fc <_puts_r+0x3c>
 800454c:	4622      	mov	r2, r4
 800454e:	4628      	mov	r0, r5
 8004550:	f000 f857 	bl	8004602 <__swbuf_r>
 8004554:	3001      	adds	r0, #1
 8004556:	d1e7      	bne.n	8004528 <_puts_r+0x68>
 8004558:	e7ce      	b.n	80044f8 <_puts_r+0x38>
 800455a:	3e01      	subs	r6, #1
 800455c:	e7e4      	b.n	8004528 <_puts_r+0x68>
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	6022      	str	r2, [r4, #0]
 8004564:	220a      	movs	r2, #10
 8004566:	701a      	strb	r2, [r3, #0]
 8004568:	e7ee      	b.n	8004548 <_puts_r+0x88>
	...

0800456c <puts>:
 800456c:	4b02      	ldr	r3, [pc, #8]	@ (8004578 <puts+0xc>)
 800456e:	4601      	mov	r1, r0
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	f7ff bfa5 	b.w	80044c0 <_puts_r>
 8004576:	bf00      	nop
 8004578:	20000028 	.word	0x20000028

0800457c <__sread>:
 800457c:	b510      	push	{r4, lr}
 800457e:	460c      	mov	r4, r1
 8004580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004584:	f000 f8fc 	bl	8004780 <_read_r>
 8004588:	2800      	cmp	r0, #0
 800458a:	bfab      	itete	ge
 800458c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800458e:	89a3      	ldrhlt	r3, [r4, #12]
 8004590:	181b      	addge	r3, r3, r0
 8004592:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004596:	bfac      	ite	ge
 8004598:	6563      	strge	r3, [r4, #84]	@ 0x54
 800459a:	81a3      	strhlt	r3, [r4, #12]
 800459c:	bd10      	pop	{r4, pc}

0800459e <__swrite>:
 800459e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a2:	461f      	mov	r7, r3
 80045a4:	898b      	ldrh	r3, [r1, #12]
 80045a6:	05db      	lsls	r3, r3, #23
 80045a8:	4605      	mov	r5, r0
 80045aa:	460c      	mov	r4, r1
 80045ac:	4616      	mov	r6, r2
 80045ae:	d505      	bpl.n	80045bc <__swrite+0x1e>
 80045b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b4:	2302      	movs	r3, #2
 80045b6:	2200      	movs	r2, #0
 80045b8:	f000 f8d0 	bl	800475c <_lseek_r>
 80045bc:	89a3      	ldrh	r3, [r4, #12]
 80045be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045c6:	81a3      	strh	r3, [r4, #12]
 80045c8:	4632      	mov	r2, r6
 80045ca:	463b      	mov	r3, r7
 80045cc:	4628      	mov	r0, r5
 80045ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045d2:	f000 b8e7 	b.w	80047a4 <_write_r>

080045d6 <__sseek>:
 80045d6:	b510      	push	{r4, lr}
 80045d8:	460c      	mov	r4, r1
 80045da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045de:	f000 f8bd 	bl	800475c <_lseek_r>
 80045e2:	1c43      	adds	r3, r0, #1
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	bf15      	itete	ne
 80045e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045f2:	81a3      	strheq	r3, [r4, #12]
 80045f4:	bf18      	it	ne
 80045f6:	81a3      	strhne	r3, [r4, #12]
 80045f8:	bd10      	pop	{r4, pc}

080045fa <__sclose>:
 80045fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045fe:	f000 b89d 	b.w	800473c <_close_r>

08004602 <__swbuf_r>:
 8004602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004604:	460e      	mov	r6, r1
 8004606:	4614      	mov	r4, r2
 8004608:	4605      	mov	r5, r0
 800460a:	b118      	cbz	r0, 8004614 <__swbuf_r+0x12>
 800460c:	6a03      	ldr	r3, [r0, #32]
 800460e:	b90b      	cbnz	r3, 8004614 <__swbuf_r+0x12>
 8004610:	f7ff ff20 	bl	8004454 <__sinit>
 8004614:	69a3      	ldr	r3, [r4, #24]
 8004616:	60a3      	str	r3, [r4, #8]
 8004618:	89a3      	ldrh	r3, [r4, #12]
 800461a:	071a      	lsls	r2, r3, #28
 800461c:	d501      	bpl.n	8004622 <__swbuf_r+0x20>
 800461e:	6923      	ldr	r3, [r4, #16]
 8004620:	b943      	cbnz	r3, 8004634 <__swbuf_r+0x32>
 8004622:	4621      	mov	r1, r4
 8004624:	4628      	mov	r0, r5
 8004626:	f000 f82b 	bl	8004680 <__swsetup_r>
 800462a:	b118      	cbz	r0, 8004634 <__swbuf_r+0x32>
 800462c:	f04f 37ff 	mov.w	r7, #4294967295
 8004630:	4638      	mov	r0, r7
 8004632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	6922      	ldr	r2, [r4, #16]
 8004638:	1a98      	subs	r0, r3, r2
 800463a:	6963      	ldr	r3, [r4, #20]
 800463c:	b2f6      	uxtb	r6, r6
 800463e:	4283      	cmp	r3, r0
 8004640:	4637      	mov	r7, r6
 8004642:	dc05      	bgt.n	8004650 <__swbuf_r+0x4e>
 8004644:	4621      	mov	r1, r4
 8004646:	4628      	mov	r0, r5
 8004648:	f000 fa68 	bl	8004b1c <_fflush_r>
 800464c:	2800      	cmp	r0, #0
 800464e:	d1ed      	bne.n	800462c <__swbuf_r+0x2a>
 8004650:	68a3      	ldr	r3, [r4, #8]
 8004652:	3b01      	subs	r3, #1
 8004654:	60a3      	str	r3, [r4, #8]
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	6022      	str	r2, [r4, #0]
 800465c:	701e      	strb	r6, [r3, #0]
 800465e:	6962      	ldr	r2, [r4, #20]
 8004660:	1c43      	adds	r3, r0, #1
 8004662:	429a      	cmp	r2, r3
 8004664:	d004      	beq.n	8004670 <__swbuf_r+0x6e>
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	07db      	lsls	r3, r3, #31
 800466a:	d5e1      	bpl.n	8004630 <__swbuf_r+0x2e>
 800466c:	2e0a      	cmp	r6, #10
 800466e:	d1df      	bne.n	8004630 <__swbuf_r+0x2e>
 8004670:	4621      	mov	r1, r4
 8004672:	4628      	mov	r0, r5
 8004674:	f000 fa52 	bl	8004b1c <_fflush_r>
 8004678:	2800      	cmp	r0, #0
 800467a:	d0d9      	beq.n	8004630 <__swbuf_r+0x2e>
 800467c:	e7d6      	b.n	800462c <__swbuf_r+0x2a>
	...

08004680 <__swsetup_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	4b29      	ldr	r3, [pc, #164]	@ (8004728 <__swsetup_r+0xa8>)
 8004684:	4605      	mov	r5, r0
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	460c      	mov	r4, r1
 800468a:	b118      	cbz	r0, 8004694 <__swsetup_r+0x14>
 800468c:	6a03      	ldr	r3, [r0, #32]
 800468e:	b90b      	cbnz	r3, 8004694 <__swsetup_r+0x14>
 8004690:	f7ff fee0 	bl	8004454 <__sinit>
 8004694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004698:	0719      	lsls	r1, r3, #28
 800469a:	d422      	bmi.n	80046e2 <__swsetup_r+0x62>
 800469c:	06da      	lsls	r2, r3, #27
 800469e:	d407      	bmi.n	80046b0 <__swsetup_r+0x30>
 80046a0:	2209      	movs	r2, #9
 80046a2:	602a      	str	r2, [r5, #0]
 80046a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046a8:	81a3      	strh	r3, [r4, #12]
 80046aa:	f04f 30ff 	mov.w	r0, #4294967295
 80046ae:	e033      	b.n	8004718 <__swsetup_r+0x98>
 80046b0:	0758      	lsls	r0, r3, #29
 80046b2:	d512      	bpl.n	80046da <__swsetup_r+0x5a>
 80046b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046b6:	b141      	cbz	r1, 80046ca <__swsetup_r+0x4a>
 80046b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80046bc:	4299      	cmp	r1, r3
 80046be:	d002      	beq.n	80046c6 <__swsetup_r+0x46>
 80046c0:	4628      	mov	r0, r5
 80046c2:	f000 f8af 	bl	8004824 <_free_r>
 80046c6:	2300      	movs	r3, #0
 80046c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80046d0:	81a3      	strh	r3, [r4, #12]
 80046d2:	2300      	movs	r3, #0
 80046d4:	6063      	str	r3, [r4, #4]
 80046d6:	6923      	ldr	r3, [r4, #16]
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	89a3      	ldrh	r3, [r4, #12]
 80046dc:	f043 0308 	orr.w	r3, r3, #8
 80046e0:	81a3      	strh	r3, [r4, #12]
 80046e2:	6923      	ldr	r3, [r4, #16]
 80046e4:	b94b      	cbnz	r3, 80046fa <__swsetup_r+0x7a>
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80046ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046f0:	d003      	beq.n	80046fa <__swsetup_r+0x7a>
 80046f2:	4621      	mov	r1, r4
 80046f4:	4628      	mov	r0, r5
 80046f6:	f000 fa5f 	bl	8004bb8 <__smakebuf_r>
 80046fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046fe:	f013 0201 	ands.w	r2, r3, #1
 8004702:	d00a      	beq.n	800471a <__swsetup_r+0x9a>
 8004704:	2200      	movs	r2, #0
 8004706:	60a2      	str	r2, [r4, #8]
 8004708:	6962      	ldr	r2, [r4, #20]
 800470a:	4252      	negs	r2, r2
 800470c:	61a2      	str	r2, [r4, #24]
 800470e:	6922      	ldr	r2, [r4, #16]
 8004710:	b942      	cbnz	r2, 8004724 <__swsetup_r+0xa4>
 8004712:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004716:	d1c5      	bne.n	80046a4 <__swsetup_r+0x24>
 8004718:	bd38      	pop	{r3, r4, r5, pc}
 800471a:	0799      	lsls	r1, r3, #30
 800471c:	bf58      	it	pl
 800471e:	6962      	ldrpl	r2, [r4, #20]
 8004720:	60a2      	str	r2, [r4, #8]
 8004722:	e7f4      	b.n	800470e <__swsetup_r+0x8e>
 8004724:	2000      	movs	r0, #0
 8004726:	e7f7      	b.n	8004718 <__swsetup_r+0x98>
 8004728:	20000028 	.word	0x20000028

0800472c <memset>:
 800472c:	4402      	add	r2, r0
 800472e:	4603      	mov	r3, r0
 8004730:	4293      	cmp	r3, r2
 8004732:	d100      	bne.n	8004736 <memset+0xa>
 8004734:	4770      	bx	lr
 8004736:	f803 1b01 	strb.w	r1, [r3], #1
 800473a:	e7f9      	b.n	8004730 <memset+0x4>

0800473c <_close_r>:
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	4d06      	ldr	r5, [pc, #24]	@ (8004758 <_close_r+0x1c>)
 8004740:	2300      	movs	r3, #0
 8004742:	4604      	mov	r4, r0
 8004744:	4608      	mov	r0, r1
 8004746:	602b      	str	r3, [r5, #0]
 8004748:	f7fd f90b 	bl	8001962 <_close>
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	d102      	bne.n	8004756 <_close_r+0x1a>
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	b103      	cbz	r3, 8004756 <_close_r+0x1a>
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	bd38      	pop	{r3, r4, r5, pc}
 8004758:	20000a80 	.word	0x20000a80

0800475c <_lseek_r>:
 800475c:	b538      	push	{r3, r4, r5, lr}
 800475e:	4d07      	ldr	r5, [pc, #28]	@ (800477c <_lseek_r+0x20>)
 8004760:	4604      	mov	r4, r0
 8004762:	4608      	mov	r0, r1
 8004764:	4611      	mov	r1, r2
 8004766:	2200      	movs	r2, #0
 8004768:	602a      	str	r2, [r5, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	f7fd f920 	bl	80019b0 <_lseek>
 8004770:	1c43      	adds	r3, r0, #1
 8004772:	d102      	bne.n	800477a <_lseek_r+0x1e>
 8004774:	682b      	ldr	r3, [r5, #0]
 8004776:	b103      	cbz	r3, 800477a <_lseek_r+0x1e>
 8004778:	6023      	str	r3, [r4, #0]
 800477a:	bd38      	pop	{r3, r4, r5, pc}
 800477c:	20000a80 	.word	0x20000a80

08004780 <_read_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4d07      	ldr	r5, [pc, #28]	@ (80047a0 <_read_r+0x20>)
 8004784:	4604      	mov	r4, r0
 8004786:	4608      	mov	r0, r1
 8004788:	4611      	mov	r1, r2
 800478a:	2200      	movs	r2, #0
 800478c:	602a      	str	r2, [r5, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	f7fd f8ae 	bl	80018f0 <_read>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d102      	bne.n	800479e <_read_r+0x1e>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	b103      	cbz	r3, 800479e <_read_r+0x1e>
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	bd38      	pop	{r3, r4, r5, pc}
 80047a0:	20000a80 	.word	0x20000a80

080047a4 <_write_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4d07      	ldr	r5, [pc, #28]	@ (80047c4 <_write_r+0x20>)
 80047a8:	4604      	mov	r4, r0
 80047aa:	4608      	mov	r0, r1
 80047ac:	4611      	mov	r1, r2
 80047ae:	2200      	movs	r2, #0
 80047b0:	602a      	str	r2, [r5, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	f7fd f8b9 	bl	800192a <_write>
 80047b8:	1c43      	adds	r3, r0, #1
 80047ba:	d102      	bne.n	80047c2 <_write_r+0x1e>
 80047bc:	682b      	ldr	r3, [r5, #0]
 80047be:	b103      	cbz	r3, 80047c2 <_write_r+0x1e>
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	bd38      	pop	{r3, r4, r5, pc}
 80047c4:	20000a80 	.word	0x20000a80

080047c8 <__errno>:
 80047c8:	4b01      	ldr	r3, [pc, #4]	@ (80047d0 <__errno+0x8>)
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20000028 	.word	0x20000028

080047d4 <__libc_init_array>:
 80047d4:	b570      	push	{r4, r5, r6, lr}
 80047d6:	4d0d      	ldr	r5, [pc, #52]	@ (800480c <__libc_init_array+0x38>)
 80047d8:	4c0d      	ldr	r4, [pc, #52]	@ (8004810 <__libc_init_array+0x3c>)
 80047da:	1b64      	subs	r4, r4, r5
 80047dc:	10a4      	asrs	r4, r4, #2
 80047de:	2600      	movs	r6, #0
 80047e0:	42a6      	cmp	r6, r4
 80047e2:	d109      	bne.n	80047f8 <__libc_init_array+0x24>
 80047e4:	4d0b      	ldr	r5, [pc, #44]	@ (8004814 <__libc_init_array+0x40>)
 80047e6:	4c0c      	ldr	r4, [pc, #48]	@ (8004818 <__libc_init_array+0x44>)
 80047e8:	f000 fa54 	bl	8004c94 <_init>
 80047ec:	1b64      	subs	r4, r4, r5
 80047ee:	10a4      	asrs	r4, r4, #2
 80047f0:	2600      	movs	r6, #0
 80047f2:	42a6      	cmp	r6, r4
 80047f4:	d105      	bne.n	8004802 <__libc_init_array+0x2e>
 80047f6:	bd70      	pop	{r4, r5, r6, pc}
 80047f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047fc:	4798      	blx	r3
 80047fe:	3601      	adds	r6, #1
 8004800:	e7ee      	b.n	80047e0 <__libc_init_array+0xc>
 8004802:	f855 3b04 	ldr.w	r3, [r5], #4
 8004806:	4798      	blx	r3
 8004808:	3601      	adds	r6, #1
 800480a:	e7f2      	b.n	80047f2 <__libc_init_array+0x1e>
 800480c:	08004ce4 	.word	0x08004ce4
 8004810:	08004ce4 	.word	0x08004ce4
 8004814:	08004ce4 	.word	0x08004ce4
 8004818:	08004ce8 	.word	0x08004ce8

0800481c <__retarget_lock_init_recursive>:
 800481c:	4770      	bx	lr

0800481e <__retarget_lock_acquire_recursive>:
 800481e:	4770      	bx	lr

08004820 <__retarget_lock_release_recursive>:
 8004820:	4770      	bx	lr
	...

08004824 <_free_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4605      	mov	r5, r0
 8004828:	2900      	cmp	r1, #0
 800482a:	d041      	beq.n	80048b0 <_free_r+0x8c>
 800482c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004830:	1f0c      	subs	r4, r1, #4
 8004832:	2b00      	cmp	r3, #0
 8004834:	bfb8      	it	lt
 8004836:	18e4      	addlt	r4, r4, r3
 8004838:	f000 f8e0 	bl	80049fc <__malloc_lock>
 800483c:	4a1d      	ldr	r2, [pc, #116]	@ (80048b4 <_free_r+0x90>)
 800483e:	6813      	ldr	r3, [r2, #0]
 8004840:	b933      	cbnz	r3, 8004850 <_free_r+0x2c>
 8004842:	6063      	str	r3, [r4, #4]
 8004844:	6014      	str	r4, [r2, #0]
 8004846:	4628      	mov	r0, r5
 8004848:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800484c:	f000 b8dc 	b.w	8004a08 <__malloc_unlock>
 8004850:	42a3      	cmp	r3, r4
 8004852:	d908      	bls.n	8004866 <_free_r+0x42>
 8004854:	6820      	ldr	r0, [r4, #0]
 8004856:	1821      	adds	r1, r4, r0
 8004858:	428b      	cmp	r3, r1
 800485a:	bf01      	itttt	eq
 800485c:	6819      	ldreq	r1, [r3, #0]
 800485e:	685b      	ldreq	r3, [r3, #4]
 8004860:	1809      	addeq	r1, r1, r0
 8004862:	6021      	streq	r1, [r4, #0]
 8004864:	e7ed      	b.n	8004842 <_free_r+0x1e>
 8004866:	461a      	mov	r2, r3
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	b10b      	cbz	r3, 8004870 <_free_r+0x4c>
 800486c:	42a3      	cmp	r3, r4
 800486e:	d9fa      	bls.n	8004866 <_free_r+0x42>
 8004870:	6811      	ldr	r1, [r2, #0]
 8004872:	1850      	adds	r0, r2, r1
 8004874:	42a0      	cmp	r0, r4
 8004876:	d10b      	bne.n	8004890 <_free_r+0x6c>
 8004878:	6820      	ldr	r0, [r4, #0]
 800487a:	4401      	add	r1, r0
 800487c:	1850      	adds	r0, r2, r1
 800487e:	4283      	cmp	r3, r0
 8004880:	6011      	str	r1, [r2, #0]
 8004882:	d1e0      	bne.n	8004846 <_free_r+0x22>
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	6053      	str	r3, [r2, #4]
 800488a:	4408      	add	r0, r1
 800488c:	6010      	str	r0, [r2, #0]
 800488e:	e7da      	b.n	8004846 <_free_r+0x22>
 8004890:	d902      	bls.n	8004898 <_free_r+0x74>
 8004892:	230c      	movs	r3, #12
 8004894:	602b      	str	r3, [r5, #0]
 8004896:	e7d6      	b.n	8004846 <_free_r+0x22>
 8004898:	6820      	ldr	r0, [r4, #0]
 800489a:	1821      	adds	r1, r4, r0
 800489c:	428b      	cmp	r3, r1
 800489e:	bf04      	itt	eq
 80048a0:	6819      	ldreq	r1, [r3, #0]
 80048a2:	685b      	ldreq	r3, [r3, #4]
 80048a4:	6063      	str	r3, [r4, #4]
 80048a6:	bf04      	itt	eq
 80048a8:	1809      	addeq	r1, r1, r0
 80048aa:	6021      	streq	r1, [r4, #0]
 80048ac:	6054      	str	r4, [r2, #4]
 80048ae:	e7ca      	b.n	8004846 <_free_r+0x22>
 80048b0:	bd38      	pop	{r3, r4, r5, pc}
 80048b2:	bf00      	nop
 80048b4:	20000a8c 	.word	0x20000a8c

080048b8 <sbrk_aligned>:
 80048b8:	b570      	push	{r4, r5, r6, lr}
 80048ba:	4e0f      	ldr	r6, [pc, #60]	@ (80048f8 <sbrk_aligned+0x40>)
 80048bc:	460c      	mov	r4, r1
 80048be:	6831      	ldr	r1, [r6, #0]
 80048c0:	4605      	mov	r5, r0
 80048c2:	b911      	cbnz	r1, 80048ca <sbrk_aligned+0x12>
 80048c4:	f000 f9d6 	bl	8004c74 <_sbrk_r>
 80048c8:	6030      	str	r0, [r6, #0]
 80048ca:	4621      	mov	r1, r4
 80048cc:	4628      	mov	r0, r5
 80048ce:	f000 f9d1 	bl	8004c74 <_sbrk_r>
 80048d2:	1c43      	adds	r3, r0, #1
 80048d4:	d103      	bne.n	80048de <sbrk_aligned+0x26>
 80048d6:	f04f 34ff 	mov.w	r4, #4294967295
 80048da:	4620      	mov	r0, r4
 80048dc:	bd70      	pop	{r4, r5, r6, pc}
 80048de:	1cc4      	adds	r4, r0, #3
 80048e0:	f024 0403 	bic.w	r4, r4, #3
 80048e4:	42a0      	cmp	r0, r4
 80048e6:	d0f8      	beq.n	80048da <sbrk_aligned+0x22>
 80048e8:	1a21      	subs	r1, r4, r0
 80048ea:	4628      	mov	r0, r5
 80048ec:	f000 f9c2 	bl	8004c74 <_sbrk_r>
 80048f0:	3001      	adds	r0, #1
 80048f2:	d1f2      	bne.n	80048da <sbrk_aligned+0x22>
 80048f4:	e7ef      	b.n	80048d6 <sbrk_aligned+0x1e>
 80048f6:	bf00      	nop
 80048f8:	20000a88 	.word	0x20000a88

080048fc <_malloc_r>:
 80048fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004900:	1ccd      	adds	r5, r1, #3
 8004902:	f025 0503 	bic.w	r5, r5, #3
 8004906:	3508      	adds	r5, #8
 8004908:	2d0c      	cmp	r5, #12
 800490a:	bf38      	it	cc
 800490c:	250c      	movcc	r5, #12
 800490e:	2d00      	cmp	r5, #0
 8004910:	4606      	mov	r6, r0
 8004912:	db01      	blt.n	8004918 <_malloc_r+0x1c>
 8004914:	42a9      	cmp	r1, r5
 8004916:	d904      	bls.n	8004922 <_malloc_r+0x26>
 8004918:	230c      	movs	r3, #12
 800491a:	6033      	str	r3, [r6, #0]
 800491c:	2000      	movs	r0, #0
 800491e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004922:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80049f8 <_malloc_r+0xfc>
 8004926:	f000 f869 	bl	80049fc <__malloc_lock>
 800492a:	f8d8 3000 	ldr.w	r3, [r8]
 800492e:	461c      	mov	r4, r3
 8004930:	bb44      	cbnz	r4, 8004984 <_malloc_r+0x88>
 8004932:	4629      	mov	r1, r5
 8004934:	4630      	mov	r0, r6
 8004936:	f7ff ffbf 	bl	80048b8 <sbrk_aligned>
 800493a:	1c43      	adds	r3, r0, #1
 800493c:	4604      	mov	r4, r0
 800493e:	d158      	bne.n	80049f2 <_malloc_r+0xf6>
 8004940:	f8d8 4000 	ldr.w	r4, [r8]
 8004944:	4627      	mov	r7, r4
 8004946:	2f00      	cmp	r7, #0
 8004948:	d143      	bne.n	80049d2 <_malloc_r+0xd6>
 800494a:	2c00      	cmp	r4, #0
 800494c:	d04b      	beq.n	80049e6 <_malloc_r+0xea>
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	4639      	mov	r1, r7
 8004952:	4630      	mov	r0, r6
 8004954:	eb04 0903 	add.w	r9, r4, r3
 8004958:	f000 f98c 	bl	8004c74 <_sbrk_r>
 800495c:	4581      	cmp	r9, r0
 800495e:	d142      	bne.n	80049e6 <_malloc_r+0xea>
 8004960:	6821      	ldr	r1, [r4, #0]
 8004962:	1a6d      	subs	r5, r5, r1
 8004964:	4629      	mov	r1, r5
 8004966:	4630      	mov	r0, r6
 8004968:	f7ff ffa6 	bl	80048b8 <sbrk_aligned>
 800496c:	3001      	adds	r0, #1
 800496e:	d03a      	beq.n	80049e6 <_malloc_r+0xea>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	442b      	add	r3, r5
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	f8d8 3000 	ldr.w	r3, [r8]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	bb62      	cbnz	r2, 80049d8 <_malloc_r+0xdc>
 800497e:	f8c8 7000 	str.w	r7, [r8]
 8004982:	e00f      	b.n	80049a4 <_malloc_r+0xa8>
 8004984:	6822      	ldr	r2, [r4, #0]
 8004986:	1b52      	subs	r2, r2, r5
 8004988:	d420      	bmi.n	80049cc <_malloc_r+0xd0>
 800498a:	2a0b      	cmp	r2, #11
 800498c:	d917      	bls.n	80049be <_malloc_r+0xc2>
 800498e:	1961      	adds	r1, r4, r5
 8004990:	42a3      	cmp	r3, r4
 8004992:	6025      	str	r5, [r4, #0]
 8004994:	bf18      	it	ne
 8004996:	6059      	strne	r1, [r3, #4]
 8004998:	6863      	ldr	r3, [r4, #4]
 800499a:	bf08      	it	eq
 800499c:	f8c8 1000 	streq.w	r1, [r8]
 80049a0:	5162      	str	r2, [r4, r5]
 80049a2:	604b      	str	r3, [r1, #4]
 80049a4:	4630      	mov	r0, r6
 80049a6:	f000 f82f 	bl	8004a08 <__malloc_unlock>
 80049aa:	f104 000b 	add.w	r0, r4, #11
 80049ae:	1d23      	adds	r3, r4, #4
 80049b0:	f020 0007 	bic.w	r0, r0, #7
 80049b4:	1ac2      	subs	r2, r0, r3
 80049b6:	bf1c      	itt	ne
 80049b8:	1a1b      	subne	r3, r3, r0
 80049ba:	50a3      	strne	r3, [r4, r2]
 80049bc:	e7af      	b.n	800491e <_malloc_r+0x22>
 80049be:	6862      	ldr	r2, [r4, #4]
 80049c0:	42a3      	cmp	r3, r4
 80049c2:	bf0c      	ite	eq
 80049c4:	f8c8 2000 	streq.w	r2, [r8]
 80049c8:	605a      	strne	r2, [r3, #4]
 80049ca:	e7eb      	b.n	80049a4 <_malloc_r+0xa8>
 80049cc:	4623      	mov	r3, r4
 80049ce:	6864      	ldr	r4, [r4, #4]
 80049d0:	e7ae      	b.n	8004930 <_malloc_r+0x34>
 80049d2:	463c      	mov	r4, r7
 80049d4:	687f      	ldr	r7, [r7, #4]
 80049d6:	e7b6      	b.n	8004946 <_malloc_r+0x4a>
 80049d8:	461a      	mov	r2, r3
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	42a3      	cmp	r3, r4
 80049de:	d1fb      	bne.n	80049d8 <_malloc_r+0xdc>
 80049e0:	2300      	movs	r3, #0
 80049e2:	6053      	str	r3, [r2, #4]
 80049e4:	e7de      	b.n	80049a4 <_malloc_r+0xa8>
 80049e6:	230c      	movs	r3, #12
 80049e8:	6033      	str	r3, [r6, #0]
 80049ea:	4630      	mov	r0, r6
 80049ec:	f000 f80c 	bl	8004a08 <__malloc_unlock>
 80049f0:	e794      	b.n	800491c <_malloc_r+0x20>
 80049f2:	6005      	str	r5, [r0, #0]
 80049f4:	e7d6      	b.n	80049a4 <_malloc_r+0xa8>
 80049f6:	bf00      	nop
 80049f8:	20000a8c 	.word	0x20000a8c

080049fc <__malloc_lock>:
 80049fc:	4801      	ldr	r0, [pc, #4]	@ (8004a04 <__malloc_lock+0x8>)
 80049fe:	f7ff bf0e 	b.w	800481e <__retarget_lock_acquire_recursive>
 8004a02:	bf00      	nop
 8004a04:	20000a84 	.word	0x20000a84

08004a08 <__malloc_unlock>:
 8004a08:	4801      	ldr	r0, [pc, #4]	@ (8004a10 <__malloc_unlock+0x8>)
 8004a0a:	f7ff bf09 	b.w	8004820 <__retarget_lock_release_recursive>
 8004a0e:	bf00      	nop
 8004a10:	20000a84 	.word	0x20000a84

08004a14 <__sflush_r>:
 8004a14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a1c:	0716      	lsls	r6, r2, #28
 8004a1e:	4605      	mov	r5, r0
 8004a20:	460c      	mov	r4, r1
 8004a22:	d454      	bmi.n	8004ace <__sflush_r+0xba>
 8004a24:	684b      	ldr	r3, [r1, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	dc02      	bgt.n	8004a30 <__sflush_r+0x1c>
 8004a2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	dd48      	ble.n	8004ac2 <__sflush_r+0xae>
 8004a30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a32:	2e00      	cmp	r6, #0
 8004a34:	d045      	beq.n	8004ac2 <__sflush_r+0xae>
 8004a36:	2300      	movs	r3, #0
 8004a38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a3c:	682f      	ldr	r7, [r5, #0]
 8004a3e:	6a21      	ldr	r1, [r4, #32]
 8004a40:	602b      	str	r3, [r5, #0]
 8004a42:	d030      	beq.n	8004aa6 <__sflush_r+0x92>
 8004a44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	0759      	lsls	r1, r3, #29
 8004a4a:	d505      	bpl.n	8004a58 <__sflush_r+0x44>
 8004a4c:	6863      	ldr	r3, [r4, #4]
 8004a4e:	1ad2      	subs	r2, r2, r3
 8004a50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a52:	b10b      	cbz	r3, 8004a58 <__sflush_r+0x44>
 8004a54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a56:	1ad2      	subs	r2, r2, r3
 8004a58:	2300      	movs	r3, #0
 8004a5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a5c:	6a21      	ldr	r1, [r4, #32]
 8004a5e:	4628      	mov	r0, r5
 8004a60:	47b0      	blx	r6
 8004a62:	1c43      	adds	r3, r0, #1
 8004a64:	89a3      	ldrh	r3, [r4, #12]
 8004a66:	d106      	bne.n	8004a76 <__sflush_r+0x62>
 8004a68:	6829      	ldr	r1, [r5, #0]
 8004a6a:	291d      	cmp	r1, #29
 8004a6c:	d82b      	bhi.n	8004ac6 <__sflush_r+0xb2>
 8004a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8004b18 <__sflush_r+0x104>)
 8004a70:	40ca      	lsrs	r2, r1
 8004a72:	07d6      	lsls	r6, r2, #31
 8004a74:	d527      	bpl.n	8004ac6 <__sflush_r+0xb2>
 8004a76:	2200      	movs	r2, #0
 8004a78:	6062      	str	r2, [r4, #4]
 8004a7a:	04d9      	lsls	r1, r3, #19
 8004a7c:	6922      	ldr	r2, [r4, #16]
 8004a7e:	6022      	str	r2, [r4, #0]
 8004a80:	d504      	bpl.n	8004a8c <__sflush_r+0x78>
 8004a82:	1c42      	adds	r2, r0, #1
 8004a84:	d101      	bne.n	8004a8a <__sflush_r+0x76>
 8004a86:	682b      	ldr	r3, [r5, #0]
 8004a88:	b903      	cbnz	r3, 8004a8c <__sflush_r+0x78>
 8004a8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a8e:	602f      	str	r7, [r5, #0]
 8004a90:	b1b9      	cbz	r1, 8004ac2 <__sflush_r+0xae>
 8004a92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a96:	4299      	cmp	r1, r3
 8004a98:	d002      	beq.n	8004aa0 <__sflush_r+0x8c>
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f7ff fec2 	bl	8004824 <_free_r>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	6363      	str	r3, [r4, #52]	@ 0x34
 8004aa4:	e00d      	b.n	8004ac2 <__sflush_r+0xae>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	47b0      	blx	r6
 8004aac:	4602      	mov	r2, r0
 8004aae:	1c50      	adds	r0, r2, #1
 8004ab0:	d1c9      	bne.n	8004a46 <__sflush_r+0x32>
 8004ab2:	682b      	ldr	r3, [r5, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0c6      	beq.n	8004a46 <__sflush_r+0x32>
 8004ab8:	2b1d      	cmp	r3, #29
 8004aba:	d001      	beq.n	8004ac0 <__sflush_r+0xac>
 8004abc:	2b16      	cmp	r3, #22
 8004abe:	d11e      	bne.n	8004afe <__sflush_r+0xea>
 8004ac0:	602f      	str	r7, [r5, #0]
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	e022      	b.n	8004b0c <__sflush_r+0xf8>
 8004ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aca:	b21b      	sxth	r3, r3
 8004acc:	e01b      	b.n	8004b06 <__sflush_r+0xf2>
 8004ace:	690f      	ldr	r7, [r1, #16]
 8004ad0:	2f00      	cmp	r7, #0
 8004ad2:	d0f6      	beq.n	8004ac2 <__sflush_r+0xae>
 8004ad4:	0793      	lsls	r3, r2, #30
 8004ad6:	680e      	ldr	r6, [r1, #0]
 8004ad8:	bf08      	it	eq
 8004ada:	694b      	ldreq	r3, [r1, #20]
 8004adc:	600f      	str	r7, [r1, #0]
 8004ade:	bf18      	it	ne
 8004ae0:	2300      	movne	r3, #0
 8004ae2:	eba6 0807 	sub.w	r8, r6, r7
 8004ae6:	608b      	str	r3, [r1, #8]
 8004ae8:	f1b8 0f00 	cmp.w	r8, #0
 8004aec:	dde9      	ble.n	8004ac2 <__sflush_r+0xae>
 8004aee:	6a21      	ldr	r1, [r4, #32]
 8004af0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004af2:	4643      	mov	r3, r8
 8004af4:	463a      	mov	r2, r7
 8004af6:	4628      	mov	r0, r5
 8004af8:	47b0      	blx	r6
 8004afa:	2800      	cmp	r0, #0
 8004afc:	dc08      	bgt.n	8004b10 <__sflush_r+0xfc>
 8004afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b06:	81a3      	strh	r3, [r4, #12]
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b10:	4407      	add	r7, r0
 8004b12:	eba8 0800 	sub.w	r8, r8, r0
 8004b16:	e7e7      	b.n	8004ae8 <__sflush_r+0xd4>
 8004b18:	20400001 	.word	0x20400001

08004b1c <_fflush_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	690b      	ldr	r3, [r1, #16]
 8004b20:	4605      	mov	r5, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	b913      	cbnz	r3, 8004b2c <_fflush_r+0x10>
 8004b26:	2500      	movs	r5, #0
 8004b28:	4628      	mov	r0, r5
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}
 8004b2c:	b118      	cbz	r0, 8004b36 <_fflush_r+0x1a>
 8004b2e:	6a03      	ldr	r3, [r0, #32]
 8004b30:	b90b      	cbnz	r3, 8004b36 <_fflush_r+0x1a>
 8004b32:	f7ff fc8f 	bl	8004454 <__sinit>
 8004b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f3      	beq.n	8004b26 <_fflush_r+0xa>
 8004b3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b40:	07d0      	lsls	r0, r2, #31
 8004b42:	d404      	bmi.n	8004b4e <_fflush_r+0x32>
 8004b44:	0599      	lsls	r1, r3, #22
 8004b46:	d402      	bmi.n	8004b4e <_fflush_r+0x32>
 8004b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b4a:	f7ff fe68 	bl	800481e <__retarget_lock_acquire_recursive>
 8004b4e:	4628      	mov	r0, r5
 8004b50:	4621      	mov	r1, r4
 8004b52:	f7ff ff5f 	bl	8004a14 <__sflush_r>
 8004b56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b58:	07da      	lsls	r2, r3, #31
 8004b5a:	4605      	mov	r5, r0
 8004b5c:	d4e4      	bmi.n	8004b28 <_fflush_r+0xc>
 8004b5e:	89a3      	ldrh	r3, [r4, #12]
 8004b60:	059b      	lsls	r3, r3, #22
 8004b62:	d4e1      	bmi.n	8004b28 <_fflush_r+0xc>
 8004b64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b66:	f7ff fe5b 	bl	8004820 <__retarget_lock_release_recursive>
 8004b6a:	e7dd      	b.n	8004b28 <_fflush_r+0xc>

08004b6c <__swhatbuf_r>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	460c      	mov	r4, r1
 8004b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b74:	2900      	cmp	r1, #0
 8004b76:	b096      	sub	sp, #88	@ 0x58
 8004b78:	4615      	mov	r5, r2
 8004b7a:	461e      	mov	r6, r3
 8004b7c:	da0d      	bge.n	8004b9a <__swhatbuf_r+0x2e>
 8004b7e:	89a3      	ldrh	r3, [r4, #12]
 8004b80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b84:	f04f 0100 	mov.w	r1, #0
 8004b88:	bf14      	ite	ne
 8004b8a:	2340      	movne	r3, #64	@ 0x40
 8004b8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b90:	2000      	movs	r0, #0
 8004b92:	6031      	str	r1, [r6, #0]
 8004b94:	602b      	str	r3, [r5, #0]
 8004b96:	b016      	add	sp, #88	@ 0x58
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
 8004b9a:	466a      	mov	r2, sp
 8004b9c:	f000 f848 	bl	8004c30 <_fstat_r>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	dbec      	blt.n	8004b7e <__swhatbuf_r+0x12>
 8004ba4:	9901      	ldr	r1, [sp, #4]
 8004ba6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004baa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004bae:	4259      	negs	r1, r3
 8004bb0:	4159      	adcs	r1, r3
 8004bb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bb6:	e7eb      	b.n	8004b90 <__swhatbuf_r+0x24>

08004bb8 <__smakebuf_r>:
 8004bb8:	898b      	ldrh	r3, [r1, #12]
 8004bba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bbc:	079d      	lsls	r5, r3, #30
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	d507      	bpl.n	8004bd4 <__smakebuf_r+0x1c>
 8004bc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004bc8:	6023      	str	r3, [r4, #0]
 8004bca:	6123      	str	r3, [r4, #16]
 8004bcc:	2301      	movs	r3, #1
 8004bce:	6163      	str	r3, [r4, #20]
 8004bd0:	b003      	add	sp, #12
 8004bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bd4:	ab01      	add	r3, sp, #4
 8004bd6:	466a      	mov	r2, sp
 8004bd8:	f7ff ffc8 	bl	8004b6c <__swhatbuf_r>
 8004bdc:	9f00      	ldr	r7, [sp, #0]
 8004bde:	4605      	mov	r5, r0
 8004be0:	4639      	mov	r1, r7
 8004be2:	4630      	mov	r0, r6
 8004be4:	f7ff fe8a 	bl	80048fc <_malloc_r>
 8004be8:	b948      	cbnz	r0, 8004bfe <__smakebuf_r+0x46>
 8004bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bee:	059a      	lsls	r2, r3, #22
 8004bf0:	d4ee      	bmi.n	8004bd0 <__smakebuf_r+0x18>
 8004bf2:	f023 0303 	bic.w	r3, r3, #3
 8004bf6:	f043 0302 	orr.w	r3, r3, #2
 8004bfa:	81a3      	strh	r3, [r4, #12]
 8004bfc:	e7e2      	b.n	8004bc4 <__smakebuf_r+0xc>
 8004bfe:	89a3      	ldrh	r3, [r4, #12]
 8004c00:	6020      	str	r0, [r4, #0]
 8004c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c06:	81a3      	strh	r3, [r4, #12]
 8004c08:	9b01      	ldr	r3, [sp, #4]
 8004c0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c0e:	b15b      	cbz	r3, 8004c28 <__smakebuf_r+0x70>
 8004c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c14:	4630      	mov	r0, r6
 8004c16:	f000 f81d 	bl	8004c54 <_isatty_r>
 8004c1a:	b128      	cbz	r0, 8004c28 <__smakebuf_r+0x70>
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	f023 0303 	bic.w	r3, r3, #3
 8004c22:	f043 0301 	orr.w	r3, r3, #1
 8004c26:	81a3      	strh	r3, [r4, #12]
 8004c28:	89a3      	ldrh	r3, [r4, #12]
 8004c2a:	431d      	orrs	r5, r3
 8004c2c:	81a5      	strh	r5, [r4, #12]
 8004c2e:	e7cf      	b.n	8004bd0 <__smakebuf_r+0x18>

08004c30 <_fstat_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4d07      	ldr	r5, [pc, #28]	@ (8004c50 <_fstat_r+0x20>)
 8004c34:	2300      	movs	r3, #0
 8004c36:	4604      	mov	r4, r0
 8004c38:	4608      	mov	r0, r1
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	602b      	str	r3, [r5, #0]
 8004c3e:	f7fc fe9c 	bl	800197a <_fstat>
 8004c42:	1c43      	adds	r3, r0, #1
 8004c44:	d102      	bne.n	8004c4c <_fstat_r+0x1c>
 8004c46:	682b      	ldr	r3, [r5, #0]
 8004c48:	b103      	cbz	r3, 8004c4c <_fstat_r+0x1c>
 8004c4a:	6023      	str	r3, [r4, #0]
 8004c4c:	bd38      	pop	{r3, r4, r5, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000a80 	.word	0x20000a80

08004c54 <_isatty_r>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	4d06      	ldr	r5, [pc, #24]	@ (8004c70 <_isatty_r+0x1c>)
 8004c58:	2300      	movs	r3, #0
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	602b      	str	r3, [r5, #0]
 8004c60:	f7fc fe9b 	bl	800199a <_isatty>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d102      	bne.n	8004c6e <_isatty_r+0x1a>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	b103      	cbz	r3, 8004c6e <_isatty_r+0x1a>
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	20000a80 	.word	0x20000a80

08004c74 <_sbrk_r>:
 8004c74:	b538      	push	{r3, r4, r5, lr}
 8004c76:	4d06      	ldr	r5, [pc, #24]	@ (8004c90 <_sbrk_r+0x1c>)
 8004c78:	2300      	movs	r3, #0
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	4608      	mov	r0, r1
 8004c7e:	602b      	str	r3, [r5, #0]
 8004c80:	f7fc fea4 	bl	80019cc <_sbrk>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d102      	bne.n	8004c8e <_sbrk_r+0x1a>
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	b103      	cbz	r3, 8004c8e <_sbrk_r+0x1a>
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	20000a80 	.word	0x20000a80

08004c94 <_init>:
 8004c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c96:	bf00      	nop
 8004c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9a:	bc08      	pop	{r3}
 8004c9c:	469e      	mov	lr, r3
 8004c9e:	4770      	bx	lr

08004ca0 <_fini>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	bf00      	nop
 8004ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca6:	bc08      	pop	{r3}
 8004ca8:	469e      	mov	lr, r3
 8004caa:	4770      	bx	lr
