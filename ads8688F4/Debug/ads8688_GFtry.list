
ads8688_GFtry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002158  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080022e0  080022e0  000032e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022f0  080022f0  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080022f0  080022f0  000032f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022f8  080022f8  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f8  080022f8  000032f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022fc  080022fc  000032fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002300  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004010  2**0
                  CONTENTS
 10 .bss          00000088  20000010  20000010  00004010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000098  20000098  00004010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005f6e  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001640  00000000  00000000  00009fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000668  00000000  00000000  0000b5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004b3  00000000  00000000  0000bc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f957  00000000  00000000  0000c10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008272  00000000  00000000  0002ba62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be966  00000000  00000000  00033cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f263a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001818  00000000  00000000  000f2680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  000f3e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022c8 	.word	0x080022c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080022c8 	.word	0x080022c8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <delay_us>:
#include "ads8688.h"
#include "spi.h"
//----------------------------------------------------------------
uint16_t count = 168;
//delay_us����
void delay_us(uint32_t us) {
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < us; i++) {
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	e00b      	b.n	800051a <delay_us+0x26>
		//168MHZ
		while (count--)
 8000502:	bf00      	nop
 8000504:	4b0a      	ldr	r3, [pc, #40]	@ (8000530 <delay_us+0x3c>)
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	1e5a      	subs	r2, r3, #1
 800050a:	b291      	uxth	r1, r2
 800050c:	4a08      	ldr	r2, [pc, #32]	@ (8000530 <delay_us+0x3c>)
 800050e:	8011      	strh	r1, [r2, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d1f7      	bne.n	8000504 <delay_us+0x10>
	for (i = 0; i < us; i++) {
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	3301      	adds	r3, #1
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	429a      	cmp	r2, r3
 8000520:	d3ef      	bcc.n	8000502 <delay_us+0xe>
			;
	}
}
 8000522:	bf00      	nop
 8000524:	bf00      	nop
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	20000000 	.word	0x20000000

08000534 <ADS8688_Init>:
// ��ڲ���: ��
// �� �� ֵ: ��
// ע������: ��
//
//-----------------------------------------------------------------
void ADS8688_Init(void) {
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0

	//GPIO_ADS8688_Configuration();   //MX_GPIO_Init();
	//SPI2_Init();   //MX_SPI_Init();
	RST_L;
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800053e:	4823      	ldr	r0, [pc, #140]	@ (80005cc <ADS8688_Init+0x98>)
 8000540:	f000 fe06 	bl	8001150 <HAL_GPIO_WritePin>
	delay_us(2);
 8000544:	2002      	movs	r0, #2
 8000546:	f7ff ffd5 	bl	80004f4 <delay_us>
	RST_H;
 800054a:	2201      	movs	r2, #1
 800054c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000550:	481e      	ldr	r0, [pc, #120]	@ (80005cc <ADS8688_Init+0x98>)
 8000552:	f000 fdfd 	bl	8001150 <HAL_GPIO_WritePin>
	DAISY_L;
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800055c:	481b      	ldr	r0, [pc, #108]	@ (80005cc <ADS8688_Init+0x98>)
 800055e:	f000 fdf7 	bl	8001150 <HAL_GPIO_WritePin>

	ADS8688_Write_Command(RST);	// �����λģʽ
 8000562:	f44f 4005 	mov.w	r0, #34048	@ 0x8500
 8000566:	f000 f833 	bl	80005d0 <ADS8688_Write_Command>
	delay_us(2);
 800056a:	2002      	movs	r0, #2
 800056c:	f7ff ffc2 	bl	80004f4 <delay_us>
	ADS8688_Write_Program(CH0_INPUT_RANGE, VREF_B_125);	// ͨ��0�����뷶ΧΪ��5.12V
 8000570:	2101      	movs	r1, #1
 8000572:	2005      	movs	r0, #5
 8000574:	f000 f858 	bl	8000628 <ADS8688_Write_Program>
	ADS8688_Write_Program(CH1_INPUT_RANGE, VREF_B_125);	// ͨ��1�����뷶ΧΪ��5.12V
 8000578:	2101      	movs	r1, #1
 800057a:	2006      	movs	r0, #6
 800057c:	f000 f854 	bl	8000628 <ADS8688_Write_Program>
	ADS8688_Write_Program(CH2_INPUT_RANGE, VREF_B_125);	// ͨ��2�����뷶ΧΪ��5.12V
 8000580:	2101      	movs	r1, #1
 8000582:	2007      	movs	r0, #7
 8000584:	f000 f850 	bl	8000628 <ADS8688_Write_Program>
	ADS8688_Write_Program(CH3_INPUT_RANGE, VREF_B_125);	// ͨ��3�����뷶ΧΪ��5.12V
 8000588:	2101      	movs	r1, #1
 800058a:	2008      	movs	r0, #8
 800058c:	f000 f84c 	bl	8000628 <ADS8688_Write_Program>
	ADS8688_Write_Program(CH4_INPUT_RANGE, VREF_B_125);	// ͨ��4�����뷶ΧΪ��5.12V
 8000590:	2101      	movs	r1, #1
 8000592:	2009      	movs	r0, #9
 8000594:	f000 f848 	bl	8000628 <ADS8688_Write_Program>
	ADS8688_Write_Program(CH5_INPUT_RANGE, VREF_B_125);	// ͨ��5�����뷶ΧΪ��5.12V
 8000598:	2101      	movs	r1, #1
 800059a:	200a      	movs	r0, #10
 800059c:	f000 f844 	bl	8000628 <ADS8688_Write_Program>
	ADS8688_Write_Program(CH6_INPUT_RANGE, VREF_B_125);	// ͨ��6�����뷶ΧΪ��5.12V
 80005a0:	2101      	movs	r1, #1
 80005a2:	200b      	movs	r0, #11
 80005a4:	f000 f840 	bl	8000628 <ADS8688_Write_Program>
	ADS8688_Write_Program(CH7_INPUT_RANGE, VREF_B_125);	// ͨ��7�����뷶ΧΪ��5.12V
 80005a8:	2101      	movs	r1, #1
 80005aa:	200c      	movs	r0, #12
 80005ac:	f000 f83c 	bl	8000628 <ADS8688_Write_Program>
	ADS8688_Write_Program(CH_PWR_DN, 0x00);
 80005b0:	2100      	movs	r1, #0
 80005b2:	2002      	movs	r0, #2
 80005b4:	f000 f838 	bl	8000628 <ADS8688_Write_Program>
	ADS8688_Write_Program(AUTO_SEQ_EN, 0xFF);
 80005b8:	21ff      	movs	r1, #255	@ 0xff
 80005ba:	2001      	movs	r0, #1
 80005bc:	f000 f834 	bl	8000628 <ADS8688_Write_Program>
	ADS8688_Write_Command(AUTO_RST);
 80005c0:	f44f 4020 	mov.w	r0, #40960	@ 0xa000
 80005c4:	f000 f804 	bl	80005d0 <ADS8688_Write_Command>
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021000 	.word	0x40021000

080005d0 <ADS8688_Write_Command>:
// ��ڲ���: com������
// �� �� ֵ: ��
// ע������: ��
//
//-----------------------------------------------------------------
void ADS8688_Write_Command(uint16_t com) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
	uint8_t wr_data[2] = { 0x00, 0x00 };
 80005da:	2300      	movs	r3, #0
 80005dc:	81bb      	strh	r3, [r7, #12]

	wr_data[0] = (uint8_t) (com >> 8);
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	0a1b      	lsrs	r3, r3, #8
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	733b      	strb	r3, [r7, #12]
	wr_data[1] = (uint8_t) (com & 0x00FF);
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	737b      	strb	r3, [r7, #13]

	CS_L;
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005f4:	480a      	ldr	r0, [pc, #40]	@ (8000620 <ADS8688_Write_Command+0x50>)
 80005f6:	f000 fdab 	bl	8001150 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, wr_data, 2, 0xFFFF);
 80005fa:	f107 010c 	add.w	r1, r7, #12
 80005fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000602:	2202      	movs	r2, #2
 8000604:	4807      	ldr	r0, [pc, #28]	@ (8000624 <ADS8688_Write_Command+0x54>)
 8000606:	f001 fa6a 	bl	8001ade <HAL_SPI_Transmit>
	CS_H;
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <ADS8688_Write_Command+0x50>)
 8000612:	f000 fd9d 	bl	8001150 <HAL_GPIO_WritePin>
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40020400 	.word	0x40020400
 8000624:	2000003c 	.word	0x2000003c

08000628 <ADS8688_Write_Program>:
//					 data������
// �� �� ֵ: ��
// ע������: ��
//
//-----------------------------------------------------------------
void ADS8688_Write_Program(uint8_t addr, uint8_t data) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	460a      	mov	r2, r1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	4613      	mov	r3, r2
 8000636:	71bb      	strb	r3, [r7, #6]
	uint8_t wr_data[2] = { 0x00, 0x00 };
 8000638:	2300      	movs	r3, #0
 800063a:	81bb      	strh	r3, [r7, #12]

	wr_data[0] = (addr << 1) | 0x01;
 800063c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	b25b      	sxtb	r3, r3
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	b25b      	sxtb	r3, r3
 800064a:	b2db      	uxtb	r3, r3
 800064c:	733b      	strb	r3, [r7, #12]
	wr_data[1] = data;
 800064e:	79bb      	ldrb	r3, [r7, #6]
 8000650:	737b      	strb	r3, [r7, #13]

	CS_L;
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000658:	480a      	ldr	r0, [pc, #40]	@ (8000684 <ADS8688_Write_Program+0x5c>)
 800065a:	f000 fd79 	bl	8001150 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, wr_data, 2, 0xFFFF);
 800065e:	f107 010c 	add.w	r1, r7, #12
 8000662:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000666:	2202      	movs	r2, #2
 8000668:	4807      	ldr	r0, [pc, #28]	@ (8000688 <ADS8688_Write_Program+0x60>)
 800066a:	f001 fa38 	bl	8001ade <HAL_SPI_Transmit>
	CS_H;
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000674:	4803      	ldr	r0, [pc, #12]	@ (8000684 <ADS8688_Write_Program+0x5c>)
 8000676:	f000 fd6b 	bl	8001150 <HAL_GPIO_WritePin>
}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40020400 	.word	0x40020400
 8000688:	2000003c 	.word	0x2000003c

0800068c <Get_AUTO_RST_Mode_ADC_Data>:
//					 *data����ȡ�õ�������
// �� �� ֵ: ��
// ע������: ��
//
//-----------------------------------------------------------------
void Get_AUTO_RST_Mode_ADC_Data(uint8_t ch_num, uint16_t *data) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af02      	add	r7, sp, #8
 8000692:	4603      	mov	r3, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	71fb      	strb	r3, [r7, #7]
	uint8_t Rxdata[4], i;
	uint8_t wr_data[4] = { 0x00, 0x00, 0x00, 0x00 };
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < ch_num; i++) {
 800069c:	2300      	movs	r3, #0
 800069e:	75fb      	strb	r3, [r7, #23]
 80006a0:	e027      	b.n	80006f2 <Get_AUTO_RST_Mode_ADC_Data+0x66>
		CS_L;
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006a8:	4816      	ldr	r0, [pc, #88]	@ (8000704 <Get_AUTO_RST_Mode_ADC_Data+0x78>)
 80006aa:	f000 fd51 	bl	8001150 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) wr_data, (uint8_t*) Rxdata,
 80006ae:	f107 0210 	add.w	r2, r7, #16
 80006b2:	f107 010c 	add.w	r1, r7, #12
 80006b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2304      	movs	r3, #4
 80006be:	4812      	ldr	r0, [pc, #72]	@ (8000708 <Get_AUTO_RST_Mode_ADC_Data+0x7c>)
 80006c0:	f001 fb51 	bl	8001d66 <HAL_SPI_TransmitReceive>
				4, 0xFFFF);
		CS_H;
 80006c4:	2201      	movs	r2, #1
 80006c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006ca:	480e      	ldr	r0, [pc, #56]	@ (8000704 <Get_AUTO_RST_Mode_ADC_Data+0x78>)
 80006cc:	f000 fd40 	bl	8001150 <HAL_GPIO_WritePin>
		*(data + i) = ((uint16_t) Rxdata[2] << 8) | Rxdata[3];
 80006d0:	7cbb      	ldrb	r3, [r7, #18]
 80006d2:	b21b      	sxth	r3, r3
 80006d4:	021b      	lsls	r3, r3, #8
 80006d6:	b21a      	sxth	r2, r3
 80006d8:	7cfb      	ldrb	r3, [r7, #19]
 80006da:	b21b      	sxth	r3, r3
 80006dc:	4313      	orrs	r3, r2
 80006de:	b219      	sxth	r1, r3
 80006e0:	7dfb      	ldrb	r3, [r7, #23]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	683a      	ldr	r2, [r7, #0]
 80006e6:	4413      	add	r3, r2
 80006e8:	b28a      	uxth	r2, r1
 80006ea:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < ch_num; i++) {
 80006ec:	7dfb      	ldrb	r3, [r7, #23]
 80006ee:	3301      	adds	r3, #1
 80006f0:	75fb      	strb	r3, [r7, #23]
 80006f2:	7dfa      	ldrb	r2, [r7, #23]
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d3d3      	bcc.n	80006a2 <Get_AUTO_RST_Mode_ADC_Data+0x16>
	}
}
 80006fa:	bf00      	nop
 80006fc:	bf00      	nop
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40020400 	.word	0x40020400
 8000708:	2000003c 	.word	0x2000003c

0800070c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	@ 0x28
 8000710:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b32      	ldr	r3, [pc, #200]	@ (80007f0 <MX_GPIO_Init+0xe4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a31      	ldr	r2, [pc, #196]	@ (80007f0 <MX_GPIO_Init+0xe4>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <MX_GPIO_Init+0xe4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <MX_GPIO_Init+0xe4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a2a      	ldr	r2, [pc, #168]	@ (80007f0 <MX_GPIO_Init+0xe4>)
 8000748:	f043 0310 	orr.w	r3, r3, #16
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b28      	ldr	r3, [pc, #160]	@ (80007f0 <MX_GPIO_Init+0xe4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0310 	and.w	r3, r3, #16
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <MX_GPIO_Init+0xe4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a23      	ldr	r2, [pc, #140]	@ (80007f0 <MX_GPIO_Init+0xe4>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <MX_GPIO_Init+0xe4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <MX_GPIO_Init+0xe4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a1c      	ldr	r2, [pc, #112]	@ (80007f0 <MX_GPIO_Init+0xe4>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_GPIO_Init+0xe4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DAISY_Pin|RST_Pin, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000798:	4816      	ldr	r0, [pc, #88]	@ (80007f4 <MX_GPIO_Init+0xe8>)
 800079a:	f000 fcd9 	bl	8001150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007a4:	4814      	ldr	r0, [pc, #80]	@ (80007f8 <MX_GPIO_Init+0xec>)
 80007a6:	f000 fcd3 	bl	8001150 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DAISY_Pin RST_Pin */
  GPIO_InitStruct.Pin = DAISY_Pin|RST_Pin;
 80007aa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b8:	2302      	movs	r3, #2
 80007ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	480c      	ldr	r0, [pc, #48]	@ (80007f4 <MX_GPIO_Init+0xe8>)
 80007c4:	f000 fb28 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80007c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d6:	2302      	movs	r3, #2
 80007d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_GPIO_Init+0xec>)
 80007e2:	f000 fb19 	bl	8000e18 <HAL_GPIO_Init>

}
 80007e6:	bf00      	nop
 80007e8:	3728      	adds	r7, #40	@ 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40020400 	.word	0x40020400

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000800:	f000 f9b2 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000804:	f000 f80e 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000808:	f7ff ff80 	bl	800070c <MX_GPIO_Init>
  MX_SPI2_Init();
 800080c:	f000 f87a 	bl	8000904 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ADS8688_Init();
 8000810:	f7ff fe90 	bl	8000534 <ADS8688_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Get_AUTO_RST_Mode_ADC_Data(8, adc_data);
 8000814:	4902      	ldr	r1, [pc, #8]	@ (8000820 <main+0x24>)
 8000816:	2008      	movs	r0, #8
 8000818:	f7ff ff38 	bl	800068c <Get_AUTO_RST_Mode_ADC_Data>
 800081c:	e7fa      	b.n	8000814 <main+0x18>
 800081e:	bf00      	nop
 8000820:	2000002c 	.word	0x2000002c

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	@ 0x50
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	2230      	movs	r2, #48	@ 0x30
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f001 fd1c 	bl	8002270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	4b28      	ldr	r3, [pc, #160]	@ (80008f0 <SystemClock_Config+0xcc>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000850:	4a27      	ldr	r2, [pc, #156]	@ (80008f0 <SystemClock_Config+0xcc>)
 8000852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000856:	6413      	str	r3, [r2, #64]	@ 0x40
 8000858:	4b25      	ldr	r3, [pc, #148]	@ (80008f0 <SystemClock_Config+0xcc>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	4b22      	ldr	r3, [pc, #136]	@ (80008f4 <SystemClock_Config+0xd0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a21      	ldr	r2, [pc, #132]	@ (80008f4 <SystemClock_Config+0xd0>)
 800086e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b1f      	ldr	r3, [pc, #124]	@ (80008f4 <SystemClock_Config+0xd0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000884:	2301      	movs	r3, #1
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000888:	2310      	movs	r3, #16
 800088a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000890:	2300      	movs	r3, #0
 8000892:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000894:	2308      	movs	r3, #8
 8000896:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000898:	23a8      	movs	r3, #168	@ 0xa8
 800089a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 fc6b 	bl	8001184 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b4:	f000 f820 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2302      	movs	r3, #2
 80008be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2105      	movs	r1, #5
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fecc 	bl	8001674 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008e2:	f000 f809 	bl	80008f8 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3750      	adds	r7, #80	@ 0x50
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <Error_Handler+0x8>

08000904 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000908:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MX_SPI2_Init+0x64>)
 800090a:	4a18      	ldr	r2, [pc, #96]	@ (800096c <MX_SPI2_Init+0x68>)
 800090c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800090e:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <MX_SPI2_Init+0x64>)
 8000910:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000914:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_SPI2_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_SPI2_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_SPI2_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_SPI2_Init+0x64>)
 800092a:	2201      	movs	r2, #1
 800092c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <MX_SPI2_Init+0x64>)
 8000930:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000934:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <MX_SPI2_Init+0x64>)
 8000938:	2220      	movs	r2, #32
 800093a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093c:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <MX_SPI2_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_SPI2_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000948:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <MX_SPI2_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_SPI2_Init+0x64>)
 8000950:	220a      	movs	r2, #10
 8000952:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	@ (8000968 <MX_SPI2_Init+0x64>)
 8000956:	f001 f839 	bl	80019cc <HAL_SPI_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000960:	f7ff ffca 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000003c 	.word	0x2000003c
 800096c:	40003800 	.word	0x40003800

08000970 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	@ 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a28      	ldr	r2, [pc, #160]	@ (8000a30 <HAL_SPI_MspInit+0xc0>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d14a      	bne.n	8000a28 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b27      	ldr	r3, [pc, #156]	@ (8000a34 <HAL_SPI_MspInit+0xc4>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	4a26      	ldr	r2, [pc, #152]	@ (8000a34 <HAL_SPI_MspInit+0xc4>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a2:	4b24      	ldr	r3, [pc, #144]	@ (8000a34 <HAL_SPI_MspInit+0xc4>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b20      	ldr	r3, [pc, #128]	@ (8000a34 <HAL_SPI_MspInit+0xc4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000a34 <HAL_SPI_MspInit+0xc4>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b1d      	ldr	r3, [pc, #116]	@ (8000a34 <HAL_SPI_MspInit+0xc4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	4b19      	ldr	r3, [pc, #100]	@ (8000a34 <HAL_SPI_MspInit+0xc4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a18      	ldr	r2, [pc, #96]	@ (8000a34 <HAL_SPI_MspInit+0xc4>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <HAL_SPI_MspInit+0xc4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009e6:	230c      	movs	r3, #12
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f6:	2305      	movs	r3, #5
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	480d      	ldr	r0, [pc, #52]	@ (8000a38 <HAL_SPI_MspInit+0xc8>)
 8000a02:	f000 fa09 	bl	8000e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a18:	2305      	movs	r3, #5
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4806      	ldr	r0, [pc, #24]	@ (8000a3c <HAL_SPI_MspInit+0xcc>)
 8000a24:	f000 f9f8 	bl	8000e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a28:	bf00      	nop
 8000a2a:	3728      	adds	r7, #40	@ 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40003800 	.word	0x40003800
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020400 	.word	0x40020400

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a8c <HAL_MspInit+0x4c>)
 8000a50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a56:	4b0d      	ldr	r3, [pc, #52]	@ (8000a8c <HAL_MspInit+0x4c>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6a:	4a08      	ldr	r2, [pc, #32]	@ (8000a8c <HAL_MspInit+0x4c>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <HAL_MspInit+0x4c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <NMI_Handler+0x4>

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae6:	f000 f891 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b18:	f7ff ffea 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	@ (8000b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	@ (8000b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b42:	f001 fb9d 	bl	8002280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fe59 	bl	80007fc <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b58:	08002300 	.word	0x08002300
  ldr r2, =_sbss
 8000b5c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b60:	20000098 	.word	0x20000098

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <HAL_Init+0x40>)
 8000b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <HAL_Init+0x40>)
 8000b7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	@ (8000ba8 <HAL_Init+0x40>)
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f90d 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	200f      	movs	r0, #15
 8000b98:	f000 f808 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff ff50 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023c00 	.word	0x40023c00

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb4:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <HAL_InitTick+0x54>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <HAL_InitTick+0x58>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f917 	bl	8000dfe <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00e      	b.n	8000bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d80a      	bhi.n	8000bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f000 f8ed 	bl	8000dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bec:	4a06      	ldr	r2, [pc, #24]	@ (8000c08 <HAL_InitTick+0x5c>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000004 	.word	0x20000004
 8000c04:	2000000c 	.word	0x2000000c
 8000c08:	20000008 	.word	0x20000008

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	2000000c 	.word	0x2000000c
 8000c30:	20000094 	.word	0x20000094

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	@ (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000094 	.word	0x20000094

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	@ (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	@ (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	@ (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	@ (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	@ 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	@ 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f7ff ff8e 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff47 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff5c 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff8e 	bl	8000d04 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5d 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffb0 	bl	8000d6c <SysTick_Config>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	@ 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	e16b      	b.n	800110c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f040 815a 	bne.w	8001106 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d005      	beq.n	8000e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d130      	bne.n	8000ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	091b      	lsrs	r3, r3, #4
 8000eb6:	f003 0201 	and.w	r2, r3, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d017      	beq.n	8000f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d123      	bne.n	8000f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	08da      	lsrs	r2, r3, #3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3208      	adds	r2, #8
 8000f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	691a      	ldr	r2, [r3, #16]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	08da      	lsrs	r2, r3, #3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3208      	adds	r2, #8
 8000f56:	69b9      	ldr	r1, [r7, #24]
 8000f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0203 	and.w	r2, r3, #3
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 80b4 	beq.w	8001106 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b60      	ldr	r3, [pc, #384]	@ (8001124 <HAL_GPIO_Init+0x30c>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	4a5f      	ldr	r2, [pc, #380]	@ (8001124 <HAL_GPIO_Init+0x30c>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fae:	4b5d      	ldr	r3, [pc, #372]	@ (8001124 <HAL_GPIO_Init+0x30c>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fba:	4a5b      	ldr	r2, [pc, #364]	@ (8001128 <HAL_GPIO_Init+0x310>)
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a52      	ldr	r2, [pc, #328]	@ (800112c <HAL_GPIO_Init+0x314>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d02b      	beq.n	800103e <HAL_GPIO_Init+0x226>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a51      	ldr	r2, [pc, #324]	@ (8001130 <HAL_GPIO_Init+0x318>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d025      	beq.n	800103a <HAL_GPIO_Init+0x222>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a50      	ldr	r2, [pc, #320]	@ (8001134 <HAL_GPIO_Init+0x31c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d01f      	beq.n	8001036 <HAL_GPIO_Init+0x21e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4f      	ldr	r2, [pc, #316]	@ (8001138 <HAL_GPIO_Init+0x320>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d019      	beq.n	8001032 <HAL_GPIO_Init+0x21a>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4e      	ldr	r2, [pc, #312]	@ (800113c <HAL_GPIO_Init+0x324>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d013      	beq.n	800102e <HAL_GPIO_Init+0x216>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4d      	ldr	r2, [pc, #308]	@ (8001140 <HAL_GPIO_Init+0x328>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d00d      	beq.n	800102a <HAL_GPIO_Init+0x212>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4c      	ldr	r2, [pc, #304]	@ (8001144 <HAL_GPIO_Init+0x32c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d007      	beq.n	8001026 <HAL_GPIO_Init+0x20e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4b      	ldr	r2, [pc, #300]	@ (8001148 <HAL_GPIO_Init+0x330>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d101      	bne.n	8001022 <HAL_GPIO_Init+0x20a>
 800101e:	2307      	movs	r3, #7
 8001020:	e00e      	b.n	8001040 <HAL_GPIO_Init+0x228>
 8001022:	2308      	movs	r3, #8
 8001024:	e00c      	b.n	8001040 <HAL_GPIO_Init+0x228>
 8001026:	2306      	movs	r3, #6
 8001028:	e00a      	b.n	8001040 <HAL_GPIO_Init+0x228>
 800102a:	2305      	movs	r3, #5
 800102c:	e008      	b.n	8001040 <HAL_GPIO_Init+0x228>
 800102e:	2304      	movs	r3, #4
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x228>
 8001032:	2303      	movs	r3, #3
 8001034:	e004      	b.n	8001040 <HAL_GPIO_Init+0x228>
 8001036:	2302      	movs	r3, #2
 8001038:	e002      	b.n	8001040 <HAL_GPIO_Init+0x228>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <HAL_GPIO_Init+0x228>
 800103e:	2300      	movs	r3, #0
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	f002 0203 	and.w	r2, r2, #3
 8001046:	0092      	lsls	r2, r2, #2
 8001048:	4093      	lsls	r3, r2
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001050:	4935      	ldr	r1, [pc, #212]	@ (8001128 <HAL_GPIO_Init+0x310>)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800105e:	4b3b      	ldr	r3, [pc, #236]	@ (800114c <HAL_GPIO_Init+0x334>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001082:	4a32      	ldr	r2, [pc, #200]	@ (800114c <HAL_GPIO_Init+0x334>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001088:	4b30      	ldr	r3, [pc, #192]	@ (800114c <HAL_GPIO_Init+0x334>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010ac:	4a27      	ldr	r2, [pc, #156]	@ (800114c <HAL_GPIO_Init+0x334>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010b2:	4b26      	ldr	r3, [pc, #152]	@ (800114c <HAL_GPIO_Init+0x334>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d6:	4a1d      	ldr	r2, [pc, #116]	@ (800114c <HAL_GPIO_Init+0x334>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <HAL_GPIO_Init+0x334>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001100:	4a12      	ldr	r2, [pc, #72]	@ (800114c <HAL_GPIO_Init+0x334>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3301      	adds	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	2b0f      	cmp	r3, #15
 8001110:	f67f ae90 	bls.w	8000e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3724      	adds	r7, #36	@ 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40013800 	.word	0x40013800
 800112c:	40020000 	.word	0x40020000
 8001130:	40020400 	.word	0x40020400
 8001134:	40020800 	.word	0x40020800
 8001138:	40020c00 	.word	0x40020c00
 800113c:	40021000 	.word	0x40021000
 8001140:	40021400 	.word	0x40021400
 8001144:	40021800 	.word	0x40021800
 8001148:	40021c00 	.word	0x40021c00
 800114c:	40013c00 	.word	0x40013c00

08001150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
 800115c:	4613      	mov	r3, r2
 800115e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001160:	787b      	ldrb	r3, [r7, #1]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800116c:	e003      	b.n	8001176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	041a      	lsls	r2, r3, #16
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	619a      	str	r2, [r3, #24]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e267      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d075      	beq.n	800128e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011a2:	4b88      	ldr	r3, [pc, #544]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d00c      	beq.n	80011c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ae:	4b85      	ldr	r3, [pc, #532]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d112      	bne.n	80011e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ba:	4b82      	ldr	r3, [pc, #520]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011c6:	d10b      	bne.n	80011e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c8:	4b7e      	ldr	r3, [pc, #504]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d05b      	beq.n	800128c <HAL_RCC_OscConfig+0x108>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d157      	bne.n	800128c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e242      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011e8:	d106      	bne.n	80011f8 <HAL_RCC_OscConfig+0x74>
 80011ea:	4b76      	ldr	r3, [pc, #472]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a75      	ldr	r2, [pc, #468]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 80011f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e01d      	b.n	8001234 <HAL_RCC_OscConfig+0xb0>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001200:	d10c      	bne.n	800121c <HAL_RCC_OscConfig+0x98>
 8001202:	4b70      	ldr	r3, [pc, #448]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a6f      	ldr	r2, [pc, #444]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	4b6d      	ldr	r3, [pc, #436]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a6c      	ldr	r2, [pc, #432]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e00b      	b.n	8001234 <HAL_RCC_OscConfig+0xb0>
 800121c:	4b69      	ldr	r3, [pc, #420]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a68      	ldr	r2, [pc, #416]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b66      	ldr	r3, [pc, #408]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a65      	ldr	r2, [pc, #404]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 800122e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d013      	beq.n	8001264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fcfa 	bl	8000c34 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001244:	f7ff fcf6 	bl	8000c34 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b64      	cmp	r3, #100	@ 0x64
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e207      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	4b5b      	ldr	r3, [pc, #364]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0xc0>
 8001262:	e014      	b.n	800128e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fce6 	bl	8000c34 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fce2 	bl	8000c34 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	@ 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e1f3      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	4b51      	ldr	r3, [pc, #324]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0xe8>
 800128a:	e000      	b.n	800128e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d063      	beq.n	8001362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800129a:	4b4a      	ldr	r3, [pc, #296]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00b      	beq.n	80012be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a6:	4b47      	ldr	r3, [pc, #284]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d11c      	bne.n	80012ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b2:	4b44      	ldr	r3, [pc, #272]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d116      	bne.n	80012ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	4b41      	ldr	r3, [pc, #260]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <HAL_RCC_OscConfig+0x152>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d001      	beq.n	80012d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e1c7      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d6:	4b3b      	ldr	r3, [pc, #236]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4937      	ldr	r1, [pc, #220]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ea:	e03a      	b.n	8001362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d020      	beq.n	8001336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f4:	4b34      	ldr	r3, [pc, #208]	@ (80013c8 <HAL_RCC_OscConfig+0x244>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fa:	f7ff fc9b 	bl	8000c34 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001302:	f7ff fc97 	bl	8000c34 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e1a8      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	4b2b      	ldr	r3, [pc, #172]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	4b28      	ldr	r3, [pc, #160]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4925      	ldr	r1, [pc, #148]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]
 8001334:	e015      	b.n	8001362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001336:	4b24      	ldr	r3, [pc, #144]	@ (80013c8 <HAL_RCC_OscConfig+0x244>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133c:	f7ff fc7a 	bl	8000c34 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001344:	f7ff fc76 	bl	8000c34 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e187      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d036      	beq.n	80013dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d016      	beq.n	80013a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_RCC_OscConfig+0x248>)
 8001378:	2201      	movs	r2, #1
 800137a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137c:	f7ff fc5a 	bl	8000c34 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff fc56 	bl	8000c34 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e167      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0x200>
 80013a2:	e01b      	b.n	80013dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a4:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <HAL_RCC_OscConfig+0x248>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fc43 	bl	8000c34 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b0:	e00e      	b.n	80013d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b2:	f7ff fc3f 	bl	8000c34 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d907      	bls.n	80013d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e150      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
 80013c4:	40023800 	.word	0x40023800
 80013c8:	42470000 	.word	0x42470000
 80013cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d0:	4b88      	ldr	r3, [pc, #544]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 80013d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1ea      	bne.n	80013b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 8097 	beq.w	8001518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ee:	4b81      	ldr	r3, [pc, #516]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10f      	bne.n	800141a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	4b7d      	ldr	r3, [pc, #500]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	4a7c      	ldr	r2, [pc, #496]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001408:	6413      	str	r3, [r2, #64]	@ 0x40
 800140a:	4b7a      	ldr	r3, [pc, #488]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001416:	2301      	movs	r3, #1
 8001418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141a:	4b77      	ldr	r3, [pc, #476]	@ (80015f8 <HAL_RCC_OscConfig+0x474>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001422:	2b00      	cmp	r3, #0
 8001424:	d118      	bne.n	8001458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001426:	4b74      	ldr	r3, [pc, #464]	@ (80015f8 <HAL_RCC_OscConfig+0x474>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a73      	ldr	r2, [pc, #460]	@ (80015f8 <HAL_RCC_OscConfig+0x474>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001432:	f7ff fbff 	bl	8000c34 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143a:	f7ff fbfb 	bl	8000c34 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e10c      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144c:	4b6a      	ldr	r3, [pc, #424]	@ (80015f8 <HAL_RCC_OscConfig+0x474>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d106      	bne.n	800146e <HAL_RCC_OscConfig+0x2ea>
 8001460:	4b64      	ldr	r3, [pc, #400]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001464:	4a63      	ldr	r2, [pc, #396]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6713      	str	r3, [r2, #112]	@ 0x70
 800146c:	e01c      	b.n	80014a8 <HAL_RCC_OscConfig+0x324>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x30c>
 8001476:	4b5f      	ldr	r3, [pc, #380]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800147a:	4a5e      	ldr	r2, [pc, #376]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6713      	str	r3, [r2, #112]	@ 0x70
 8001482:	4b5c      	ldr	r3, [pc, #368]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001486:	4a5b      	ldr	r2, [pc, #364]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6713      	str	r3, [r2, #112]	@ 0x70
 800148e:	e00b      	b.n	80014a8 <HAL_RCC_OscConfig+0x324>
 8001490:	4b58      	ldr	r3, [pc, #352]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001494:	4a57      	ldr	r2, [pc, #348]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001496:	f023 0301 	bic.w	r3, r3, #1
 800149a:	6713      	str	r3, [r2, #112]	@ 0x70
 800149c:	4b55      	ldr	r3, [pc, #340]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 800149e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014a0:	4a54      	ldr	r2, [pc, #336]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 80014a2:	f023 0304 	bic.w	r3, r3, #4
 80014a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d015      	beq.n	80014dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff fbc0 	bl	8000c34 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b8:	f7ff fbbc 	bl	8000c34 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e0cb      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ce:	4b49      	ldr	r3, [pc, #292]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0ee      	beq.n	80014b8 <HAL_RCC_OscConfig+0x334>
 80014da:	e014      	b.n	8001506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014dc:	f7ff fbaa 	bl	8000c34 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e4:	f7ff fba6 	bl	8000c34 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e0b5      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fa:	4b3e      	ldr	r3, [pc, #248]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1ee      	bne.n	80014e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d105      	bne.n	8001518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800150c:	4b39      	ldr	r3, [pc, #228]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001510:	4a38      	ldr	r2, [pc, #224]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001516:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 80a1 	beq.w	8001664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001522:	4b34      	ldr	r3, [pc, #208]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b08      	cmp	r3, #8
 800152c:	d05c      	beq.n	80015e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d141      	bne.n	80015ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b31      	ldr	r3, [pc, #196]	@ (80015fc <HAL_RCC_OscConfig+0x478>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fb7a 	bl	8000c34 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff fb76 	bl	8000c34 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e087      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001556:	4b27      	ldr	r3, [pc, #156]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69da      	ldr	r2, [r3, #28]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001570:	019b      	lsls	r3, r3, #6
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001578:	085b      	lsrs	r3, r3, #1
 800157a:	3b01      	subs	r3, #1
 800157c:	041b      	lsls	r3, r3, #16
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001584:	061b      	lsls	r3, r3, #24
 8001586:	491b      	ldr	r1, [pc, #108]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800158c:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <HAL_RCC_OscConfig+0x478>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001592:	f7ff fb4f 	bl	8000c34 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159a:	f7ff fb4b 	bl	8000c34 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e05c      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ac:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x416>
 80015b8:	e054      	b.n	8001664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <HAL_RCC_OscConfig+0x478>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fb38 	bl	8000c34 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c8:	f7ff fb34 	bl	8000c34 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e045      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_RCC_OscConfig+0x470>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x444>
 80015e6:	e03d      	b.n	8001664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d107      	bne.n	8001600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e038      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40007000 	.word	0x40007000
 80015fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001600:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <HAL_RCC_OscConfig+0x4ec>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d028      	beq.n	8001660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001618:	429a      	cmp	r2, r3
 800161a:	d121      	bne.n	8001660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001626:	429a      	cmp	r2, r3
 8001628:	d11a      	bne.n	8001660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001630:	4013      	ands	r3, r2
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001638:	4293      	cmp	r3, r2
 800163a:	d111      	bne.n	8001660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001646:	085b      	lsrs	r3, r3, #1
 8001648:	3b01      	subs	r3, #1
 800164a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800164c:	429a      	cmp	r2, r3
 800164e:	d107      	bne.n	8001660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800165a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800

08001674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0cc      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001688:	4b68      	ldr	r3, [pc, #416]	@ (800182c <HAL_RCC_ClockConfig+0x1b8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d90c      	bls.n	80016b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b65      	ldr	r3, [pc, #404]	@ (800182c <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b63      	ldr	r3, [pc, #396]	@ (800182c <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e0b8      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d020      	beq.n	80016fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c8:	4b59      	ldr	r3, [pc, #356]	@ (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	4a58      	ldr	r2, [pc, #352]	@ (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e0:	4b53      	ldr	r3, [pc, #332]	@ (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4a52      	ldr	r2, [pc, #328]	@ (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ec:	4b50      	ldr	r3, [pc, #320]	@ (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	494d      	ldr	r1, [pc, #308]	@ (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d044      	beq.n	8001794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d107      	bne.n	8001722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001712:	4b47      	ldr	r3, [pc, #284]	@ (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d119      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e07f      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d003      	beq.n	8001732 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172e:	2b03      	cmp	r3, #3
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001732:	4b3f      	ldr	r3, [pc, #252]	@ (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06f      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001742:	4b3b      	ldr	r3, [pc, #236]	@ (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e067      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001752:	4b37      	ldr	r3, [pc, #220]	@ (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f023 0203 	bic.w	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4934      	ldr	r1, [pc, #208]	@ (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	4313      	orrs	r3, r2
 8001762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001764:	f7ff fa66 	bl	8000c34 <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	e00a      	b.n	8001782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176c:	f7ff fa62 	bl	8000c34 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e04f      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001782:	4b2b      	ldr	r3, [pc, #172]	@ (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 020c 	and.w	r2, r3, #12
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	429a      	cmp	r2, r3
 8001792:	d1eb      	bne.n	800176c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001794:	4b25      	ldr	r3, [pc, #148]	@ (800182c <HAL_RCC_ClockConfig+0x1b8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d20c      	bcs.n	80017bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b22      	ldr	r3, [pc, #136]	@ (800182c <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b20      	ldr	r3, [pc, #128]	@ (800182c <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e032      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d008      	beq.n	80017da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c8:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4916      	ldr	r1, [pc, #88]	@ (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d009      	beq.n	80017fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017e6:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	490e      	ldr	r1, [pc, #56]	@ (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017fa:	f000 f821 	bl	8001840 <HAL_RCC_GetSysClockFreq>
 80017fe:	4602      	mov	r2, r0
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	091b      	lsrs	r3, r3, #4
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	490a      	ldr	r1, [pc, #40]	@ (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	5ccb      	ldrb	r3, [r1, r3]
 800180e:	fa22 f303 	lsr.w	r3, r2, r3
 8001812:	4a09      	ldr	r2, [pc, #36]	@ (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <HAL_RCC_ClockConfig+0x1c8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff f9c6 	bl	8000bac <HAL_InitTick>

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023c00 	.word	0x40023c00
 8001830:	40023800 	.word	0x40023800
 8001834:	080022e0 	.word	0x080022e0
 8001838:	20000004 	.word	0x20000004
 800183c:	20000008 	.word	0x20000008

08001840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001844:	b090      	sub	sp, #64	@ 0x40
 8001846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001858:	4b59      	ldr	r3, [pc, #356]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b08      	cmp	r3, #8
 8001862:	d00d      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x40>
 8001864:	2b08      	cmp	r3, #8
 8001866:	f200 80a1 	bhi.w	80019ac <HAL_RCC_GetSysClockFreq+0x16c>
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <HAL_RCC_GetSysClockFreq+0x34>
 800186e:	2b04      	cmp	r3, #4
 8001870:	d003      	beq.n	800187a <HAL_RCC_GetSysClockFreq+0x3a>
 8001872:	e09b      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001874:	4b53      	ldr	r3, [pc, #332]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001876:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001878:	e09b      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800187a:	4b53      	ldr	r3, [pc, #332]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800187c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800187e:	e098      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001880:	4b4f      	ldr	r3, [pc, #316]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001888:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800188a:	4b4d      	ldr	r3, [pc, #308]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d028      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001896:	4b4a      	ldr	r3, [pc, #296]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	099b      	lsrs	r3, r3, #6
 800189c:	2200      	movs	r2, #0
 800189e:	623b      	str	r3, [r7, #32]
 80018a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018a8:	2100      	movs	r1, #0
 80018aa:	4b47      	ldr	r3, [pc, #284]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018ac:	fb03 f201 	mul.w	r2, r3, r1
 80018b0:	2300      	movs	r3, #0
 80018b2:	fb00 f303 	mul.w	r3, r0, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	4a43      	ldr	r2, [pc, #268]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018ba:	fba0 1202 	umull	r1, r2, r0, r2
 80018be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018c0:	460a      	mov	r2, r1
 80018c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80018c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018c6:	4413      	add	r3, r2
 80018c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018cc:	2200      	movs	r2, #0
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	61fa      	str	r2, [r7, #28]
 80018d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80018da:	f7fe fc75 	bl	80001c8 <__aeabi_uldivmod>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4613      	mov	r3, r2
 80018e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018e6:	e053      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e8:	4b35      	ldr	r3, [pc, #212]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	099b      	lsrs	r3, r3, #6
 80018ee:	2200      	movs	r2, #0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	617a      	str	r2, [r7, #20]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018fa:	f04f 0b00 	mov.w	fp, #0
 80018fe:	4652      	mov	r2, sl
 8001900:	465b      	mov	r3, fp
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	0159      	lsls	r1, r3, #5
 800190c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001910:	0150      	lsls	r0, r2, #5
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	ebb2 080a 	subs.w	r8, r2, sl
 800191a:	eb63 090b 	sbc.w	r9, r3, fp
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800192a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800192e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001932:	ebb2 0408 	subs.w	r4, r2, r8
 8001936:	eb63 0509 	sbc.w	r5, r3, r9
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	00eb      	lsls	r3, r5, #3
 8001944:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001948:	00e2      	lsls	r2, r4, #3
 800194a:	4614      	mov	r4, r2
 800194c:	461d      	mov	r5, r3
 800194e:	eb14 030a 	adds.w	r3, r4, sl
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	eb45 030b 	adc.w	r3, r5, fp
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001966:	4629      	mov	r1, r5
 8001968:	028b      	lsls	r3, r1, #10
 800196a:	4621      	mov	r1, r4
 800196c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001970:	4621      	mov	r1, r4
 8001972:	028a      	lsls	r2, r1, #10
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800197a:	2200      	movs	r2, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	60fa      	str	r2, [r7, #12]
 8001980:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001984:	f7fe fc20 	bl	80001c8 <__aeabi_uldivmod>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4613      	mov	r3, r2
 800198e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001990:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	0c1b      	lsrs	r3, r3, #16
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	3301      	adds	r3, #1
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80019a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019aa:	e002      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019ac:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80019ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3740      	adds	r7, #64	@ 0x40
 80019b8:	46bd      	mov	sp, r7
 80019ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	00f42400 	.word	0x00f42400
 80019c8:	017d7840 	.word	0x017d7840

080019cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e07b      	b.n	8001ad6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d108      	bne.n	80019f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80019ee:	d009      	beq.n	8001a04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
 80019f6:	e005      	b.n	8001a04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7fe ffa6 	bl	8000970 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a88:	ea42 0103 	orr.w	r1, r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	0c1b      	lsrs	r3, r3, #16
 8001aa2:	f003 0104 	and.w	r1, r3, #4
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	f003 0210 	and.w	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	69da      	ldr	r2, [r3, #28]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ac4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b088      	sub	sp, #32
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	603b      	str	r3, [r7, #0]
 8001aea:	4613      	mov	r3, r2
 8001aec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001aee:	f7ff f8a1 	bl	8000c34 <HAL_GetTick>
 8001af2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d001      	beq.n	8001b08 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001b04:	2302      	movs	r3, #2
 8001b06:	e12a      	b.n	8001d5e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <HAL_SPI_Transmit+0x36>
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e122      	b.n	8001d5e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_SPI_Transmit+0x48>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e11b      	b.n	8001d5e <HAL_SPI_Transmit+0x280>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2203      	movs	r2, #3
 8001b32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	88fa      	ldrh	r2, [r7, #6]
 8001b46:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	88fa      	ldrh	r2, [r7, #6]
 8001b4c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b74:	d10f      	bne.n	8001b96 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ba0:	2b40      	cmp	r3, #64	@ 0x40
 8001ba2:	d007      	beq.n	8001bb4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001bb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001bbc:	d152      	bne.n	8001c64 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HAL_SPI_Transmit+0xee>
 8001bc6:	8b7b      	ldrh	r3, [r7, #26]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d145      	bne.n	8001c58 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd0:	881a      	ldrh	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bdc:	1c9a      	adds	r2, r3, #2
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001bf0:	e032      	b.n	8001c58 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d112      	bne.n	8001c26 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c04:	881a      	ldrh	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c10:	1c9a      	adds	r2, r3, #2
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001c24:	e018      	b.n	8001c58 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c26:	f7ff f805 	bl	8000c34 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d803      	bhi.n	8001c3e <HAL_SPI_Transmit+0x160>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d102      	bne.n	8001c44 <HAL_SPI_Transmit+0x166>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d109      	bne.n	8001c58 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e082      	b.n	8001d5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1c7      	bne.n	8001bf2 <HAL_SPI_Transmit+0x114>
 8001c62:	e053      	b.n	8001d0c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <HAL_SPI_Transmit+0x194>
 8001c6c:	8b7b      	ldrh	r3, [r7, #26]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d147      	bne.n	8001d02 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	330c      	adds	r3, #12
 8001c7c:	7812      	ldrb	r2, [r2, #0]
 8001c7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001c98:	e033      	b.n	8001d02 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d113      	bne.n	8001cd0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	330c      	adds	r3, #12
 8001cb2:	7812      	ldrb	r2, [r2, #0]
 8001cb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001cce:	e018      	b.n	8001d02 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cd0:	f7fe ffb0 	bl	8000c34 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d803      	bhi.n	8001ce8 <HAL_SPI_Transmit+0x20a>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce6:	d102      	bne.n	8001cee <HAL_SPI_Transmit+0x210>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e02d      	b.n	8001d5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1c6      	bne.n	8001c9a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	6839      	ldr	r1, [r7, #0]
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f000 fa59 	bl	80021c8 <SPI_EndRxTxTransaction>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10a      	bne.n	8001d40 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
  }
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3720      	adds	r7, #32
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b08a      	sub	sp, #40	@ 0x28
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001d74:	2301      	movs	r3, #1
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d78:	f7fe ff5c 	bl	8000c34 <HAL_GetTick>
 8001d7c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d84:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001d8c:	887b      	ldrh	r3, [r7, #2]
 8001d8e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d90:	7ffb      	ldrb	r3, [r7, #31]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d00c      	beq.n	8001db0 <HAL_SPI_TransmitReceive+0x4a>
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d9c:	d106      	bne.n	8001dac <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <HAL_SPI_TransmitReceive+0x46>
 8001da6:	7ffb      	ldrb	r3, [r7, #31]
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d001      	beq.n	8001db0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001dac:	2302      	movs	r3, #2
 8001dae:	e17f      	b.n	80020b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d005      	beq.n	8001dc2 <HAL_SPI_TransmitReceive+0x5c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <HAL_SPI_TransmitReceive+0x5c>
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e174      	b.n	80020b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_SPI_TransmitReceive+0x6e>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e16d      	b.n	80020b0 <HAL_SPI_TransmitReceive+0x34a>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d003      	beq.n	8001df0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2205      	movs	r2, #5
 8001dec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	887a      	ldrh	r2, [r7, #2]
 8001e06:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	887a      	ldrh	r2, [r7, #2]
 8001e12:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e30:	2b40      	cmp	r3, #64	@ 0x40
 8001e32:	d007      	beq.n	8001e44 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e4c:	d17e      	bne.n	8001f4c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <HAL_SPI_TransmitReceive+0xf6>
 8001e56:	8afb      	ldrh	r3, [r7, #22]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d16c      	bne.n	8001f36 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e60:	881a      	ldrh	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6c:	1c9a      	adds	r2, r3, #2
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e80:	e059      	b.n	8001f36 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d11b      	bne.n	8001ec8 <HAL_SPI_TransmitReceive+0x162>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d016      	beq.n	8001ec8 <HAL_SPI_TransmitReceive+0x162>
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d113      	bne.n	8001ec8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea4:	881a      	ldrh	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb0:	1c9a      	adds	r2, r3, #2
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d119      	bne.n	8001f0a <HAL_SPI_TransmitReceive+0x1a4>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d014      	beq.n	8001f0a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eea:	b292      	uxth	r2, r2
 8001eec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef2:	1c9a      	adds	r2, r3, #2
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f06:	2301      	movs	r3, #1
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f0a:	f7fe fe93 	bl	8000c34 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d80d      	bhi.n	8001f36 <HAL_SPI_TransmitReceive+0x1d0>
 8001f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f20:	d009      	beq.n	8001f36 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e0bc      	b.n	80020b0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1a0      	bne.n	8001e82 <HAL_SPI_TransmitReceive+0x11c>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d19b      	bne.n	8001e82 <HAL_SPI_TransmitReceive+0x11c>
 8001f4a:	e082      	b.n	8002052 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <HAL_SPI_TransmitReceive+0x1f4>
 8001f54:	8afb      	ldrh	r3, [r7, #22]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d171      	bne.n	800203e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	330c      	adds	r3, #12
 8001f64:	7812      	ldrb	r2, [r2, #0]
 8001f66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f80:	e05d      	b.n	800203e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d11c      	bne.n	8001fca <HAL_SPI_TransmitReceive+0x264>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d017      	beq.n	8001fca <HAL_SPI_TransmitReceive+0x264>
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d114      	bne.n	8001fca <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	330c      	adds	r3, #12
 8001faa:	7812      	ldrb	r2, [r2, #0]
 8001fac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d119      	bne.n	800200c <HAL_SPI_TransmitReceive+0x2a6>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d014      	beq.n	800200c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002008:	2301      	movs	r3, #1
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800200c:	f7fe fe12 	bl	8000c34 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	6a3b      	ldr	r3, [r7, #32]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002018:	429a      	cmp	r2, r3
 800201a:	d803      	bhi.n	8002024 <HAL_SPI_TransmitReceive+0x2be>
 800201c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800201e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002022:	d102      	bne.n	800202a <HAL_SPI_TransmitReceive+0x2c4>
 8002024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002026:	2b00      	cmp	r3, #0
 8002028:	d109      	bne.n	800203e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e038      	b.n	80020b0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002042:	b29b      	uxth	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d19c      	bne.n	8001f82 <HAL_SPI_TransmitReceive+0x21c>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d197      	bne.n	8001f82 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002052:	6a3a      	ldr	r2, [r7, #32]
 8002054:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 f8b6 	bl	80021c8 <SPI_EndRxTxTransaction>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d008      	beq.n	8002074 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2220      	movs	r2, #32
 8002066:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e01d      	b.n	80020b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10a      	bne.n	8002092 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80020ae:	2300      	movs	r3, #0
  }
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3728      	adds	r7, #40	@ 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	4613      	mov	r3, r2
 80020c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80020c8:	f7fe fdb4 	bl	8000c34 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	4413      	add	r3, r2
 80020d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80020d8:	f7fe fdac 	bl	8000c34 <HAL_GetTick>
 80020dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020de:	4b39      	ldr	r3, [pc, #228]	@ (80021c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	015b      	lsls	r3, r3, #5
 80020e4:	0d1b      	lsrs	r3, r3, #20
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	fb02 f303 	mul.w	r3, r2, r3
 80020ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020ee:	e055      	b.n	800219c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f6:	d051      	beq.n	800219c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020f8:	f7fe fd9c 	bl	8000c34 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	429a      	cmp	r2, r3
 8002106:	d902      	bls.n	800210e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d13d      	bne.n	800218a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800211c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002126:	d111      	bne.n	800214c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002130:	d004      	beq.n	800213c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800213a:	d107      	bne.n	800214c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800214a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002150:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002154:	d10f      	bne.n	8002176 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002174:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e018      	b.n	80021bc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	e002      	b.n	800219c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3b01      	subs	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4013      	ands	r3, r2
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d19a      	bne.n	80020f0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000004 	.word	0x20000004

080021c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2201      	movs	r2, #1
 80021dc:	2102      	movs	r1, #2
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f7ff ff6a 	bl	80020b8 <SPI_WaitFlagStateUntilTimeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ee:	f043 0220 	orr.w	r2, r3, #32
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e032      	b.n	8002260 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80021fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002268 <SPI_EndRxTxTransaction+0xa0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a1b      	ldr	r2, [pc, #108]	@ (800226c <SPI_EndRxTxTransaction+0xa4>)
 8002200:	fba2 2303 	umull	r2, r3, r2, r3
 8002204:	0d5b      	lsrs	r3, r3, #21
 8002206:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800220a:	fb02 f303 	mul.w	r3, r2, r3
 800220e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002218:	d112      	bne.n	8002240 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2200      	movs	r2, #0
 8002222:	2180      	movs	r1, #128	@ 0x80
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f7ff ff47 	bl	80020b8 <SPI_WaitFlagStateUntilTimeout>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d016      	beq.n	800225e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002234:	f043 0220 	orr.w	r2, r3, #32
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e00f      	b.n	8002260 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3b01      	subs	r3, #1
 800224a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002256:	2b80      	cmp	r3, #128	@ 0x80
 8002258:	d0f2      	beq.n	8002240 <SPI_EndRxTxTransaction+0x78>
 800225a:	e000      	b.n	800225e <SPI_EndRxTxTransaction+0x96>
        break;
 800225c:	bf00      	nop
  }

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000004 	.word	0x20000004
 800226c:	165e9f81 	.word	0x165e9f81

08002270 <memset>:
 8002270:	4402      	add	r2, r0
 8002272:	4603      	mov	r3, r0
 8002274:	4293      	cmp	r3, r2
 8002276:	d100      	bne.n	800227a <memset+0xa>
 8002278:	4770      	bx	lr
 800227a:	f803 1b01 	strb.w	r1, [r3], #1
 800227e:	e7f9      	b.n	8002274 <memset+0x4>

08002280 <__libc_init_array>:
 8002280:	b570      	push	{r4, r5, r6, lr}
 8002282:	4d0d      	ldr	r5, [pc, #52]	@ (80022b8 <__libc_init_array+0x38>)
 8002284:	4c0d      	ldr	r4, [pc, #52]	@ (80022bc <__libc_init_array+0x3c>)
 8002286:	1b64      	subs	r4, r4, r5
 8002288:	10a4      	asrs	r4, r4, #2
 800228a:	2600      	movs	r6, #0
 800228c:	42a6      	cmp	r6, r4
 800228e:	d109      	bne.n	80022a4 <__libc_init_array+0x24>
 8002290:	4d0b      	ldr	r5, [pc, #44]	@ (80022c0 <__libc_init_array+0x40>)
 8002292:	4c0c      	ldr	r4, [pc, #48]	@ (80022c4 <__libc_init_array+0x44>)
 8002294:	f000 f818 	bl	80022c8 <_init>
 8002298:	1b64      	subs	r4, r4, r5
 800229a:	10a4      	asrs	r4, r4, #2
 800229c:	2600      	movs	r6, #0
 800229e:	42a6      	cmp	r6, r4
 80022a0:	d105      	bne.n	80022ae <__libc_init_array+0x2e>
 80022a2:	bd70      	pop	{r4, r5, r6, pc}
 80022a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022a8:	4798      	blx	r3
 80022aa:	3601      	adds	r6, #1
 80022ac:	e7ee      	b.n	800228c <__libc_init_array+0xc>
 80022ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b2:	4798      	blx	r3
 80022b4:	3601      	adds	r6, #1
 80022b6:	e7f2      	b.n	800229e <__libc_init_array+0x1e>
 80022b8:	080022f8 	.word	0x080022f8
 80022bc:	080022f8 	.word	0x080022f8
 80022c0:	080022f8 	.word	0x080022f8
 80022c4:	080022fc 	.word	0x080022fc

080022c8 <_init>:
 80022c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ca:	bf00      	nop
 80022cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ce:	bc08      	pop	{r3}
 80022d0:	469e      	mov	lr, r3
 80022d2:	4770      	bx	lr

080022d4 <_fini>:
 80022d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d6:	bf00      	nop
 80022d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022da:	bc08      	pop	{r3}
 80022dc:	469e      	mov	lr, r3
 80022de:	4770      	bx	lr
